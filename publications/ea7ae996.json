{"id": "ea7ae996", "examenData": {"id": "941899", "fecha": "2025-04-16", "profesor": "Mariela Isabel Camargo Rom\u00e1n", "nombreAlumno": "", "idAlumno": "", "bloqueado": true, "preguntasMarcar": [{"numero": 1, "texto": "1-1) \u00bfCu\u00e1l de los siguientes es un principio fundamental de las arquitecturas reactivas?", "puntaje": 5, "opciones": [{"texto": "A) Acoplamiento fuerte entre componentes", "valor": "A"}, {"texto": "B) Tolerancia al fallo", "valor": "B"}, {"texto": "C) Dependencia de recursos compartidos", "valor": "C"}, {"texto": "D) Procesamiento en lotes", "valor": "D"}, {"texto": "E) Sincronizaci\u00f3n r\u00edgida", "valor": "E"}], "respuestaSeleccionada": null}], "preguntasLibres": [{"numero": 1, "texto": "1-1. Describe y compara los principios fundamentales de la arquitectura en capas y la arquitectura hexagonal, explicando en qu\u00e9 escenarios ser\u00eda m\u00e1s conveniente utilizar cada una y c\u00f3mo abordan la separaci\u00f3n de responsabilidades. (nivel intermedio)", "puntaje": 5, "respuestaAlumno": ""}], "casosUso": [{"numero": 1, "descripcion": "**Caso 1-1**  \n\n**Escenario pr\u00e1ctico:**  \nUna plataforma de comercio electr\u00f3nico necesita manejar picos de tr\u00e1fico durante eventos de ventas flash sin degradar el rendimiento. Debes dise\u00f1ar un sistema reactivo que procese \u00f3rdenes de compra de manera asincr\u00f3nica y garantice la consistencia de datos.  \n\n**Preguntas casos de uso:**  \n1. \u00bfC\u00f3mo implementar\u00edas un patr\u00f3n de cola de mensajes para gestionar \u00f3rdenes de compra de forma reactiva?  \n2. \u00bfQu\u00e9 estrategias usar\u00edas para mantener la consistencia de datos entre servicios distribuidos durante fallos?  \n\n**Requisitos espec\u00edficos:**  \n- Implementar un servicio de \u00f3rdenes que publique eventos en una cola.  \n- Consumir eventos asincr\u00f3nicamente para procesar pagos y actualizar inventario.  \n- Garantizar consistencia eventual usando patrones como Saga o Event Sourcing.  \n\n**Sugerencias de herramientas/enfoques:**  \n- Herramientas: Kafka, RabbitMQ, Axon Framework, Spring WebFlux.  \n- Enfoques: Arquitectura basada en eventos, patr\u00f3n CQRS.", "pregunta": "Pregunta sobre el caso de uso", "puntaje": 10, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-04-16T17:45:47.668692", "expiration": "2025-04-23T22:45:47.652Z", "publicAccess": true}
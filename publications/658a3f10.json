{"id": "658a3f10", "examenData": {"examen_id": "835564", "nombre_examen": "Programaci\u00f3n UML", "tipo_examen": "Evaluaci\u00f3n", "fecha": "2025-04-28T21:12:07.356Z", "nombre_profesor": "Mariela Isabel Camargo Rom\u00e1n", "profesor_id": "16MI987", "preguntas_marcar": [{"numero": 1, "texto": "\u00bfCu\u00e1l de los siguientes principios NO es parte de las arquitecturas reactivas?  \nA) Responsividad  \nB) Acoplamiento fuerte  \nC) Elasticidad  \nD) Tolerancia a fallos  \nE) Orientaci\u00f3n a mensajes", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 2, "texto": "\u00bfQu\u00e9 herramienta se usa com\u00fanmente para implementar patrones reactivos en Java?  \nA) Reactor  \nB) Hibernate  \nC) Spring MVC  \nD) JPA  \nE) JDBC", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 3, "texto": "\u00bfQu\u00e9 patr\u00f3n reactivo se utiliza para manejar flujos de datos as\u00edncronos?  \nA) Observer  \nB) Singleton  \nC) Factory  \nD) Decorator  \nE) Proxy", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 4, "texto": "\u00bfQu\u00e9 ventaja ofrece el enfoque reactivo en sistemas distribuidos?  \nA) Menor latencia  \nB) Mayor acoplamiento  \nC) Dependencia de estado global  \nD) Complejidad reducida en el dise\u00f1o  \nE) Soporte para transacciones ACID", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 5, "texto": "\u00bfQu\u00e9 componente de Project Reactor representa un flujo de datos con 0..N elementos?  \nA) Mono  \nB) Flux  \nC) Observable  \nD) Stream  \nE) Future", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}], "preguntas_libres": [{"numero": 6, "texto": "**Intermedio:** Compara el Modelo de Actores con la Programaci\u00f3n Reactiva tradicional, destacando ventajas, desventajas y casos de uso espec\u00edficos para cada enfoque.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 7, "texto": "**Intermedio-Avanzado:** Describe c\u00f3mo se maneja el backpressure en sistemas reactivos y qu\u00e9 estrategias pueden implementarse para gestionarlo eficientemente en una arquitectura basada en flujos de datos.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 8, "texto": "**Avanzado:** Analiza c\u00f3mo garantizar la consistencia de datos en un sistema distribuido reactivo, considerando desaf\u00edos como latencia, particionamiento de red y fallos transitorios.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 9, "texto": "**Avanzado:** Explica de qu\u00e9 manera las Arquitecturas Reactivas pueden integrarse con tecnolog\u00edas serverless y qu\u00e9 consideraciones deben tenerse en cuenta para mantener la resiliencia y escalabilidad.", "puntaje": 1, "respuestaAlumno": ""}], "casos_uso": [{"numero": 10, "descripcion": "**Escenario**: Plataforma de comercio electr\u00f3nico con actualizaci\u00f3n en tiempo real de inventario y precios.  \n   - **Requisitos**: El estudiante debe dise\u00f1ar una arquitectura reactiva que sincronice cambios en inventario y precios entre m\u00faltiples microservicios y notifique a los clientes mediante WebSockets.  \n   - **Herramientas sugeridas**: Spring WebFlux, MongoDB Change Streams, y RabbitMQ para mensajer\u00eda.", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 1, "respuestaAlumno": "", "archivoSubido": false}, {"numero": 11, "descripcion": "**Escenario**: Aplicaci\u00f3n de seguimiento de pedidos para log\u00edstica con actualizaciones en vivo.  \n   - **Requisitos**: El estudiante debe crear un sistema que muestre el estado de los pedidos en tiempo real, utilizando eventos reactivos para actualizar la interfaz de usuario sin recargas.  \n   - **Herramientas sugeridas**: Node.js con Socket.io, PostgreSQL con LISTEN/NOTIFY, y React para el frontend.", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 1, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-04-28T16:12:07.395801", "expiration": "2025-05-05T21:12:07.356Z", "publicAccess": true}
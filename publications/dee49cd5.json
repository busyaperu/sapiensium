{"id": "dee49cd5", "examenData": {"examen_id": "124464", "nombre_examen": "Arquitecturas Reactivas", "tipo_examen": "Evaluaci\u00f3n", "fecha": "2025-05-22T21:58:14.904Z", "nombre_profesor": "Mariela Isabel Camargo Rom\u00e1n", "profesor_id": "16MI987", "preguntas_marcar": [{"numero": 1, "texto": "\u00bfQu\u00e9 patr\u00f3n de dise\u00f1o se utiliza frecuentemente en arquitecturas reactivas para manejar flujos de datos as\u00edncronos?\nA) Singleton\nB) Factory\nC) Observer\nD) Strategy\nE) Decorator", "puntaje": 0.5, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 2, "texto": "\u00bfCu\u00e1l es la principal ventaja de utilizar un backpressure en un sistema reactivo?\nA) Mayor velocidad de procesamiento\nB) Menor consumo de memoria\nC) Prevenci\u00f3n de sobrecarga del sistema\nD) Mejor manejo de errores\nE) Aumento de la concurrencia", "puntaje": 0.5, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 3, "texto": "\u00bfQu\u00e9 tecnolog\u00eda es com\u00fanmente utilizada para implementar arquitecturas reactivas?\nA) Spring MVC\nB) Struts\nC) Reactor\nD) JSF\nE) Servlet", "puntaje": 0.5, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 4, "texto": "\u00bfCu\u00e1l de las siguientes afirmaciones sobre los actores en un sistema reactivo es FALSA?\nA) Son unidades de concurrencia independientes.\nB) Pueden comunicarse mediante el paso de mensajes.\nC) Son gestionados por un scheduler.\nD) Siempre comparten estado mutable.\nE) Pueden fallar de forma independiente sin afectar al sistema completo.", "puntaje": 0.5, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 5, "texto": "\u00bfQu\u00e9 tipo de sistema es ideal para ser implementado con una arquitectura reactiva?\nA) Sistemas de procesamiento de lotes\nB) Sistemas monol\u00edticos con baja concurrencia\nC) Sistemas de alta concurrencia y eventos en tiempo real\nD) Sistemas con pocos datos\nE) Sistemas sin necesidad de escalabilidad", "puntaje": 0.5, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 6, "texto": "\u00bfQu\u00e9 patr\u00f3n de dise\u00f1o se utiliza a menudo para manejar la concurrencia en arquitecturas reactivas?\nA) Singleton\nB) Factory\nC) Actor\nD) Observer\nE) Strategy", "puntaje": 0.5, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 7, "texto": "\u00bfCu\u00e1l es la principal ventaja de usar un backpressure en una arquitectura reactiva?\nA) Mayor velocidad de procesamiento\nB) Menor latencia\nC) Prevenci\u00f3n de sobrecarga del sistema\nD) Aumento de la concurrencia\nE) Simplificaci\u00f3n del c\u00f3digo", "puntaje": 0.5, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 8, "texto": "\u00bfQu\u00e9 tecnolog\u00eda es com\u00fanmente utilizada para implementar flujos de datos reactivos?\nA) JDBC\nB) Spring MVC\nC) RxJava\nD) Hibernate\nE) JPA", "puntaje": 0.5, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 9, "texto": "\u00bfQu\u00e9 caracter\u00edstica describe mejor la resiliencia en una arquitectura reactiva?\nA) Capacidad para manejar picos de tr\u00e1fico\nB) Capacidad para recuperarse de fallos\nC) Capacidad para escalar horizontalmente\nD) Capacidad para responder r\u00e1pidamente a las solicitudes\nE) Capacidad para procesar grandes vol\u00famenes de datos", "puntaje": 0.5, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 10, "texto": "\u00bfCu\u00e1l de las siguientes afirmaciones sobre la elasticidad en las arquitecturas reactivas es FALSA?\nA) Permite escalar recursos seg\u00fan la demanda.\nB) Reduce los costos al optimizar el uso de recursos.\nC) Implica una configuraci\u00f3n est\u00e1tica de recursos.\nD) Se adapta a cambios en la carga de trabajo.\nE) Mejora la eficiencia del sistema.", "puntaje": 0.5, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}], "preguntas_libres": [{"numero": 11, "texto": "1. Describa las ventajas y desventajas de utilizar un enfoque reactivo en el dise\u00f1o de una arquitectura de microservicios, compar\u00e1ndolo con un enfoque tradicional basado en peticiones-respuestas.  Proporcione ejemplos concretos.\n\n2. Explique c\u00f3mo la programaci\u00f3n reactiva y el patr\u00f3n Reactor (o un patr\u00f3n similar) contribuyen a la escalabilidad y resistencia a fallos en una arquitectura distribuida.  Detalle ejemplos de implementaciones concretas en un caso de uso espec\u00edfico.\n\n3. Analice las implicaciones de la gesti\u00f3n de backpressure en una arquitectura reactiva, incluyendo estrategias para su manejo y las consecuencias de una mala gesti\u00f3n del mismo.  Proporcione ejemplos de escenarios donde la gesti\u00f3n de backpressure sea cr\u00edtica.\n\n4. Compare y contraste dos frameworks de programaci\u00f3n reactiva diferentes (ej. RxJava y Project Reactor) en t\u00e9rminos de sus caracter\u00edsticas principales, fortalezas y debilidades.  \u00bfEn qu\u00e9 situaciones ser\u00eda preferible utilizar uno sobre el otro?\n\n5. Dise\u00f1e una arquitectura reactiva para una aplicaci\u00f3n de comercio electr\u00f3nico de alto volumen de transacciones, considerando aspectos como la persistencia de datos, la gesti\u00f3n de eventos y la integraci\u00f3n con sistemas externos.  Justifique las decisiones de dise\u00f1o tomadas.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 12, "texto": "Explique c\u00f3mo la gesti\u00f3n de errores y la tolerancia a fallos se abordan de manera diferente en una arquitectura reactiva en comparaci\u00f3n con una arquitectura monol\u00edtica.  Illustre su respuesta con ejemplos de patrones de dise\u00f1o reactivos relevantes.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 13, "texto": "Analice el impacto del uso de backpressure en una arquitectura reactiva distribuida. \u00bfC\u00f3mo se implementa el backpressure y qu\u00e9 estrategias se pueden utilizar para manejarlo eficazmente en un escenario de alta concurrencia?", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 14, "texto": "Explique c\u00f3mo la elasticidad y la resiliencia se implementan en una arquitectura reactiva, proporcionando ejemplos concretos de mecanismos utilizados para lograr estos objetivos en un sistema distribuido.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 15, "texto": "Analice el impacto del backpressure en una arquitectura reactiva. \u00bfC\u00f3mo se gestiona eficazmente para evitar la sobrecarga del sistema y garantizar la estabilidad?  Describa diferentes estrategias y sus implicaciones.", "puntaje": 1, "respuestaAlumno": ""}], "casos_uso": [{"numero": 16, "descripcion": "-   **Escenario pr\u00e1ctico detallado:** Un sistema de monitoreo de redes recibe un flujo continuo de eventos (ej. errores de conexi\u00f3n, cambios de estado de dispositivos). Estos eventos deben ser procesados en tiempo real para detectar patrones (ej. m\u00faltiples errores en un dispositivo) y generar alertas. El volumen de eventos puede ser muy alto y variable.\n-   **Requisitos espec\u00edficos:** Construir un servicio que consuma un stream de eventos de red, aplique reglas de correlaci\u00f3n y detecci\u00f3n de patrones sobre la ventana de tiempo de los eventos, y emita eventos de alerta cuando se detecten condiciones predefinidas. El sistema debe procesar los eventos de forma no bloqueante y ser capaz de escalar para manejar picos de tr\u00e1fico.\n-   **Sugerencias de herramientas o enfoques:** Usar frameworks de stream processing (Akka Streams, Kafka Streams, Apache Flink) o librer\u00edas de programaci\u00f3n reactiva con operadores de ventana y agregaci\u00f3n (Reactor, RxJava). Considerar el uso de un message broker (Kafka) como fuente del stream de eventos.", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 1, "respuestaAlumno": "", "archivoSubido": false}, {"numero": 17, "descripcion": "-   **Escenario pr\u00e1ctico detallado:** Desarrollar el backend para una aplicaci\u00f3n de chat en tiempo real. Los mensajes enviados por un usuario deben ser instant\u00e1neamente visibles para todos los dem\u00e1s usuarios en la misma sala. El sistema debe manejar miles de usuarios concurrentes y la entrega de mensajes debe ser eficiente y de baja latencia.\n-   **Requisitos espec\u00edficos:** Implementar un servicio que reciba mensajes de chat de usuarios, los persista (opcionalmente) y los difunda eficientemente a todos los clientes suscritos a una sala espec\u00edfica. La comunicaci\u00f3n entre el servidor y los clientes web debe ser en tiempo real y bidireccional.\n-   **Sugerencias de herramientas o enfoques:** Utilizar WebSockets o Server-Sent Events (SSE) con un framework web reactivo (Spring WebFlux, Vert.x, Akka HTTP). Usar", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 1, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-05-22T16:58:14.956162", "expiration": "2025-05-29T21:58:14.904Z", "publicAccess": true}
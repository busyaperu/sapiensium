{"id": "dc2109f1", "examenData": {"examen_id": "284879", "nombre_examen": "Arquitecturas Reactivas", "tipo_examen": "Evaluaci\u00f3n", "fecha": "2025-05-27T19:03:51.497Z", "nombre_profesor": "Mariela Isabel Camargo Rom\u00e1n", "profesor_id": "16MI987", "preguntas_marcar": [{"numero": 1, "texto": "\u00bfQu\u00e9 patr\u00f3n de dise\u00f1o se utiliza com\u00fanmente en arquitecturas reactivas para manejar la concurrencia?\nA) Singleton\nB) Factory\nC) Actor\nD) Observer\nE) Strategy", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 2, "texto": "Un sistema reactivo idealmente deber\u00eda responder a las peticiones en:\nA)  Segundos\nB)  Milisegundos\nC)  Microsegundos\nD)  Nanosegundos\nE)  Tiempo real, instant\u00e1neamente", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 3, "texto": "\u00bfQu\u00e9 tecnolog\u00eda es ampliamente utilizada para implementar flujos de datos reactivos?\nA)  Spring Boot\nB)  Apache Kafka\nC)  ReactJS\nD)  AngularJS\nE)  Node.js", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 4, "texto": "La capacidad de un sistema reactivo para recuperarse de fallos se conoce como:\nA)  Escalabilidad\nB)  Elasticidad\nC)  Resiliencia\nD)  Responsividad\nE)  Modularidad", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 5, "texto": "\u00bfQu\u00e9 concepto describe la habilidad de un sistema reactivo para adaptarse a cambios en la carga?\nA)  Tolerancia a fallos\nB)  Escalabilidad\nC)  Elasticidad\nD)  Modularidad\nE)  Consistencia", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}], "preguntas_libres": [{"numero": 6, "texto": "- Nivel B\u00e1sico\nExplique c\u00f3mo el patr\u00f3n de dise\u00f1o \"Command Query Responsibility Segregation\" (CQRS) contribuye a la construcci\u00f3n de sistemas reactivos escalables y resilientes.  Detalle ejemplos de implementaci\u00f3n y sus implicaciones en la arquitectura.", "puntaje": 0.5, "respuestaAlumno": ""}, {"numero": 7, "texto": "- Nivel B\u00e1sico\nAnalice la importancia del backpressure en un sistema reactivo distribuido.  Describa diferentes estrategias para gestionar el backpressure y sus consecuencias en la eficiencia y la estabilidad del sistema.  Proporcione ejemplos de implementaci\u00f3n.", "puntaje": 0.5, "respuestaAlumno": ""}, {"numero": 8, "texto": "- Nivel B\u00e1sico\nCompare y contraste dos frameworks o librer\u00edas diferentes para la construcci\u00f3n de aplicaciones reactivas (ej. Spring WebFlux y Akka Streams).  Considere aspectos como la facilidad de uso, el rendimiento y las caracter\u00edsticas espec\u00edficas de cada uno.", "puntaje": 0.5, "respuestaAlumno": ""}, {"numero": 9, "texto": "- Nivel Intermedio\nDise\u00f1e una arquitectura reactiva para una aplicaci\u00f3n de comercio electr\u00f3nico que maneje un alto volumen de transacciones concurrentes, incluyendo la gesti\u00f3n de eventos, la persistencia de datos y la integraci\u00f3n con sistemas externos.  Justifique las decisiones de dise\u00f1o tomadas.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 10, "texto": "- Nivel Intermedio\nExplique c\u00f3mo el patr\u00f3n de dise\u00f1o \"Backpressure\" se implementa en una arquitectura reactiva y c\u00f3mo ayuda a gestionar el flujo de datos en situaciones de alta carga.  Incluya ejemplos de librer\u00edas o frameworks que lo soportan.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 11, "texto": "- Nivel Intermedio\nAnalice la importancia de la elasticidad y la resiliencia en una arquitectura reactiva, detallando c\u00f3mo se logran estas caracter\u00edsticas utilizando patrones como la tolerancia a fallos y la capacidad de auto-recuperaci\u00f3n.", "puntaje": 1.5, "respuestaAlumno": ""}, {"numero": 12, "texto": "- Nivel Avanzado\nCompare y contraste las estrategias de manejo de errores en arquitecturas reactivas con las utilizadas en arquitecturas imperativas.  Discuta las implicaciones en la gesti\u00f3n de excepciones y la propagaci\u00f3n de errores.", "puntaje": 2, "respuestaAlumno": ""}, {"numero": 13, "texto": "- Nivel Avanzado\nImagine un escenario complejo de una aplicaci\u00f3n en tiempo real, como un sistema de trading de alta frecuencia.  Dise\u00f1e una arquitectura reactiva para este sistema, justificando la elecci\u00f3n de las tecnolog\u00edas y patrones de dise\u00f1o utilizados, y explicando c\u00f3mo se gestionan los aspectos de concurrencia y escalabilidad.", "puntaje": 2, "respuestaAlumno": ""}], "casos_uso": [{"numero": 14, "descripcion": "**Escenario:** Una plataforma de trading de criptomonedas necesita procesar un alto volumen de transacciones y actualizar los precios en tiempo real para miles de usuarios concurrentes.\n    **Requisitos:**  Desarrollar un sistema reactivo que gestione las \u00f3rdenes de compra/venta, actualice los saldos de los usuarios y muestre los precios del mercado en tiempo real con baja latencia. Debe ser resiliente a fallos y capaz de manejar picos de tr\u00e1fico.\n    **Sugerencias:** Vert.x, RxJava, Redis.", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 5, "respuestaAlumno": "", "archivoSubido": false}, {"numero": 15, "descripcion": "**Escenario:** Una aplicaci\u00f3n de chat en tiempo real necesita permitir la comunicaci\u00f3n instant\u00e1nea entre m\u00faltiples usuarios, incluyendo notificaciones de mensajes nuevos y actualizaciones de estado.\n    **Requisitos:** Construir un sistema reactivo que permita a los usuarios enviar y recibir mensajes en tiempo real, gestionar la presencia de usuarios y notificarles sobre nuevos mensajes. Debe ser escalable para un gran n\u00famero de usuarios y conexiones concurrentes.\n    **Sugerencias:** WebSockets, Socket.IO, Spring WebFlux.", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 5, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-05-27T14:03:51.532851", "expiration": "2025-06-03T19:03:51.497Z", "publicAccess": true}
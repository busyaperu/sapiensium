{"id": "35c60027", "examenData": {"examen_id": "724066", "nombre_examen": "Arquitecturas Reactivas", "tipo_examen": "Evaluaci\u00f3n", "fecha": "2025-05-22T12:14:51.320Z", "nombre_profesor": "Mariela Isabel Camargo Rom\u00e1n", "profesor_id": "16MI987", "preguntas_marcar": [{"numero": 1, "texto": "\u00bfQu\u00e9 patr\u00f3n de dise\u00f1o se utiliza frecuentemente en arquitecturas reactivas para manejar la concurrencia?\nA) Singleton\nB) Factory\nC) Actor\nD) Observer\nE) Strategy", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 2, "texto": "\u00bfCu\u00e1l es la principal ventaja de utilizar un backpressure en una arquitectura reactiva?\nA) Mayor velocidad de procesamiento\nB) Menor latencia\nC) Prevenci\u00f3n de sobrecarga del sistema\nD) Aumento del consumo de recursos\nE) Simplificaci\u00f3n del c\u00f3digo", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 3, "texto": "\u00bfQu\u00e9 tecnolog\u00eda es com\u00fanmente usada para implementar flujos de datos reactivos?\nA) JDBC\nB) Spring MVC\nC) RxJava\nD) Hibernate\nE) JSP", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 4, "texto": "\u00bfCu\u00e1l de las siguientes afirmaciones sobre la elasticidad en arquitecturas reactivas es FALSA?\nA) Permite escalar recursos seg\u00fan la demanda.\nB) Reduce la necesidad de provisionamiento excesivo.\nC) Aumenta la complejidad del sistema.\nD) Mejora la eficiencia de recursos.\nE) Garantiza un rendimiento constante bajo cualquier carga.", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 5, "texto": "\u00bfQu\u00e9 concepto se refiere a la capacidad de un sistema reactivo para continuar funcionando incluso con fallos parciales?\nA) Elasticidad\nB) Responsividad\nC) Resiliencia\nD) Orientaci\u00f3n a mensajes\nE) Backpressure", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}], "preguntas_libres": [{"numero": 6, "texto": "Explique c\u00f3mo la gesti\u00f3n de backpressure en un sistema reactivo ayuda a prevenir fallas en cascada y a mantener la estabilidad del sistema bajo carga alta.  Proporcione ejemplos concretos de mecanismos de backpressure.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 7, "texto": "Analice el rol de los patrones de dise\u00f1o reactivos, como el patr\u00f3n Reactor y el patr\u00f3n Actor, en la construcci\u00f3n de aplicaciones resilientes y escalables.  Ilustre su respuesta con ejemplos de su aplicaci\u00f3n en un escenario real.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 8, "texto": "Compare y contraste las diferentes implementaciones de frameworks reactivos (ej. Spring WebFlux, Akka, Vert.x) considerando aspectos como el modelo de programaci\u00f3n, el rendimiento y la facilidad de uso.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 9, "texto": "Dise\u00f1e una arquitectura reactiva para una aplicaci\u00f3n de streaming de video en tiempo real, considerando aspectos como la escalabilidad, la tolerancia a fallos y la gesti\u00f3n de la concurrencia.  Detalle las tecnolog\u00edas y patrones de dise\u00f1o que utilizar\u00eda y justifique sus elecciones.", "puntaje": 2, "respuestaAlumno": ""}], "casos_uso": [{"numero": 10, "descripcion": "**Escenario pr\u00e1ctico detallado:** Una plataforma de trading financiero recibe un flujo constante y de muy alto volumen de datos de precios de acciones y otros instrumentos (millones de ticks por segundo). El sistema debe procesar estos datos en tiempo real para detectar oportunidades de arbitraje o cambios bruscos de precios, permitiendo a los usuarios ejecutar operaciones con la m\u00ednima latencia posible y manteniendo la interfaz de usuario responsiva incluso bajo picos extremos de datos.\n    **Requisitos espec\u00edficos:** Describe c\u00f3mo una arquitectura reactiva maneja el alto rendimiento y la baja latencia requeridos en este escenario. Explica dos desaf\u00edos clave que la arquitectura reactiva resuelve para mantener la responsividad bajo carga extrema.\n    **Sugerencias de herramientas o enfoques:** Reactive Streams (RxJava, Project Reactor), Akka Streams, Apache Flink, Kafka, Sistemas basados en actores.", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 10, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-05-22T07:14:51.348574", "expiration": "2025-05-29T12:14:51.320Z", "publicAccess": true}
{"id": "e551a6a1", "examenData": {"examen_id": "680286", "nombre_examen": "Arquitecturas Reactivas", "tipo_examen": "Evaluaci\u00f3n", "fecha": "2025-05-23T16:04:15.698Z", "nombre_profesor": "Mariela Isabel Camargo Rom\u00e1n", "profesor_id": "16MI987", "preguntas_marcar": [{"numero": 1, "texto": "\u00bfQu\u00e9 patr\u00f3n de dise\u00f1o se utiliza com\u00fanmente para manejar la concurrencia en sistemas reactivos?\nA) Singleton\nB) Factory\nC) Actor\nD) Observer\nE) Template Method", "puntaje": 0.5, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 2, "texto": "\u00bfCu\u00e1l es la principal ventaja del uso de backpressure en un sistema reactivo?\nA) Mayor velocidad de procesamiento\nB) Menor consumo de memoria\nC) Prevenci\u00f3n de sobrecarga del sistema\nD) Simplificaci\u00f3n del c\u00f3digo\nE) Aumento de la concurrencia", "puntaje": 0.5, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 3, "texto": "\u00bfQu\u00e9 tecnolog\u00eda es ampliamente utilizada para la implementaci\u00f3n de flujos de datos reactivos?\nA) JDBC\nB) Spring MVC\nC) RxJava\nD) Hibernate\nE) Struts", "puntaje": 0.5, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 4, "texto": "Un sistema reactivo se caracteriza por ser:\nA) Monol\u00edtico\nB) Sincr\u00f3nico\nC) Bloqueante\nD) Asincr\u00f3nico\nE) Centralizado", "puntaje": 0.5, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 5, "texto": "\u00bfCu\u00e1l de las siguientes afirmaciones sobre la elasticidad en sistemas reactivos es FALSA?\nA) Permite escalar recursos seg\u00fan la demanda.\nB) Reduce costos operacionales.\nC) Mejora la eficiencia del sistema.\nD) Garantiza una respuesta constante en todo momento.\nE) Se adapta a cambios en la carga de trabajo.", "puntaje": 0.5, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 6, "texto": "Un sistema reactivo se caracteriza por:\nA) Procesamiento s\u00edncrono y bloqueante.\nB) Alta dependencia de bases de datos relacionales.\nC)  Manejo eficiente de grandes vol\u00famenes de datos en batch.\nD) Capacidad de respuesta ante fallos y cambios de carga.\nE)  Arquitectura monol\u00edtica y centralizada.", "puntaje": 0.5, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 7, "texto": "\u00bfQu\u00e9 patr\u00f3n de dise\u00f1o es crucial para la implementaci\u00f3n de arquitecturas reactivas?\nA) Singleton\nB) Factory\nC) Observer\nD) Strategy\nE) Template Method", "puntaje": 0.5, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 8, "texto": "\u00bfCu\u00e1l de las siguientes tecnolog\u00edas es ampliamente utilizada en arquitecturas reactivas?\nA)  JDBC\nB)  Spring MVC\nC)  RxJava\nD)  JSP\nE)  Struts", "puntaje": 0.5, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 9, "texto": "La elasticidad en una arquitectura reactiva se refiere a:\nA) La capacidad de manejar picos de carga.\nB) La resistencia a fallos de hardware.\nC) La capacidad de respuesta ante peticiones.\nD) La consistencia de datos.\nE) La seguridad del sistema.", "puntaje": 0.5, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 10, "texto": "\u00bfQu\u00e9 concepto permite la comunicaci\u00f3n as\u00edncrona en arquitecturas reactivas?\nA)  Sincronizaci\u00f3n de hilos\nB)  Llamadas de procedimiento remoto (RPC)\nC)  Mensajer\u00eda (e.g., Kafka, RabbitMQ)\nD)  Bloqueo de recursos\nE)  Transacciones distribuidas", "puntaje": 0.5, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}], "preguntas_libres": [{"numero": 11, "texto": "Explique c\u00f3mo el patr\u00f3n de dise\u00f1o \"Backpressure\" se implementa en una arquitectura reactiva y qu\u00e9 rol juega en la gesti\u00f3n de la carga y la prevenci\u00f3n de fallos en cascada.  Proporcione ejemplos de librer\u00edas o frameworks que lo implementan.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 12, "texto": "Analice las implicaciones de la elecci\u00f3n de un framework reactivo espec\u00edfico (ej. Spring WebFlux, Akka, Vert.x) en el rendimiento y la escalabilidad de una aplicaci\u00f3n.  Considere factores como el tipo de aplicaci\u00f3n, el volumen de datos y la complejidad de los procesos.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 13, "texto": "Dise\u00f1e una arquitectura reactiva para un sistema de procesamiento de streaming de datos en tiempo real, considerando la ingesta de datos, el procesamiento distribuido y la persistencia de los resultados.  Detalle las tecnolog\u00edas y patrones de dise\u00f1o utilizados y justifique sus elecciones.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 14, "texto": "Compare y contraste las estrategias de manejo de errores en arquitecturas reactivas y arquitecturas tradicionales.  Discuta c\u00f3mo las excepciones se propagan y se manejan en un contexto reactivo, y c\u00f3mo se puede garantizar la fiabilidad y la resiliencia del sistema ante fallos.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 15, "texto": "Explique c\u00f3mo se gestiona la tolerancia a fallos en una arquitectura reactiva, considerando la propagaci\u00f3n de errores y la recuperaci\u00f3n de sistemas distribuidos.  Incluya ejemplos concretos de patrones de dise\u00f1o utilizados.", "puntaje": 1, "respuestaAlumno": ""}], "casos_uso": [{"numero": 16, "descripcion": "-  Escenario pr\u00e1ctico detallado: Un sistema de pujas en tiempo real para subastas online. Los usuarios env\u00edan pujas constantemente, especialmente en los segundos finales de una subasta. El sistema debe procesar estas pujas con m\u00ednima latencia y notificar a todos los participantes activos sobre el estado actual de la subasta (precio, mejor postor) casi instant\u00e1neamente. Debe soportar un n\u00famero muy elevado de conexiones concurrentes.\n    a)   Requisitos espec\u00edficos: Dise\u00f1ar el flujo de procesamiento de pujas para garantizar baja latencia y orden correcto. Implementar un mecanismo eficiente de difusi\u00f3n de actualizaciones a miles o millones de clientes conectados. Asegurar que el sistema se mantenga responsivo y consistente bajo picos extremos de concurrencia.\n    -  Sugerencias de herramientas o enfoques: WebSockets para comunicaci\u00f3n bidireccional de baja latencia, Akka o Vert.x para concurrencia y manejo de actores/eventos, Redis Pub/Sub para difusi\u00f3n de mensajes, patr\u00f3n CQRS con Event Sourcing para la gesti\u00f3n del estado de la subasta.", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 5, "respuestaAlumno": "", "archivoSubido": false}, {"numero": 17, "descripcion": "-   Escenario pr\u00e1ctico detallado: Un proceso de fulfillment de pedidos en un e-commerce basado en microservicios. Un pedido activa una secuencia de acciones a trav\u00e9s de servicios (validaci\u00f3n de inventario, procesamiento de pago, coordinaci\u00f3n de env\u00edo, notificaci\u00f3n al cliente). Si uno de estos servicios falla temporalmente o responde lentamente, el proceso general no debe detenerse ni perder el estado; debe poder reintentar o compensar acciones.\n    a)  Requisitos espec\u00edficos: Dise\u00f1ar el flujo de orquestaci\u00f3n de servicios utilizando un enfoque de coreograf\u00eda basado en eventos/mensajes. Implementar patrones de resiliencia como Circuit Breaker y Retry. Definir mecanismos para manejar fallos (ej. Saga pattern) que permitan compensar acciones ya realizadas (ej. revertir un pago si el env\u00edo falla).\n    -   Sugerencias de herramientas o enfoques: Broker de mensajes (RabbitMQ, Kafka), Spring Integration o Apache Camel para orquestaci\u00f3n de flujos de mensajes, librer\u00edas de resiliencia (Resilience4j, Hystrix), implementaci\u00f3n del patr\u00f3n Saga.", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 5, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-05-23T11:04:15.752720", "expiration": "2025-05-30T16:04:15.698Z", "publicAccess": true}
{"id": "01b6ebef", "examenData": {"examen_id": "166614", "nombre_examen": "Arquitecturas Reactivas", "tipo_examen": "Evaluaci\u00f3n", "fecha": "2025-05-21T22:31:32.869Z", "nombre_profesor": "Mariela Isabel Camargo Rom\u00e1n", "profesor_id": "16MI987", "preguntas_marcar": [{"numero": 1, "texto": "\u00bfQu\u00e9 patr\u00f3n de dise\u00f1o se utiliza com\u00fanmente para manejar la concurrencia en sistemas reactivos?\nA) Singleton\nB) Factory\nC) Actor\nD) Observer\nE) Strategy", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 2, "texto": "\u00bfCu\u00e1l es la principal ventaja de utilizar un backpressure en un sistema reactivo?\nA) Mayor velocidad de procesamiento\nB) Menor latencia\nC) Prevenci\u00f3n de sobrecarga del sistema\nD) Simplificaci\u00f3n del c\u00f3digo\nE) Aumento del consumo de memoria", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 3, "texto": "\u00bfQu\u00e9 tecnolog\u00eda es ampliamente utilizada para implementar flujos de datos reactivos?\nA)  Spring Boot\nB)  ReactJS\nC)  RxJava\nD)  AngularJS\nE)  Node.js", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 4, "texto": "\u00bfCu\u00e1l de las siguientes caracter\u00edsticas describe mejor la resiliencia en una arquitectura reactiva?\nA) Capacidad de escalar horizontalmente\nB) Capacidad de recuperarse de fallos\nC) Alta velocidad de procesamiento\nD) Baja latencia\nE) Uso eficiente de recursos", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 5, "texto": "\u00bfQu\u00e9 concepto se refiere a la capacidad de un sistema reactivo de adaptarse a cambios en la carga?\nA) Responsividad\nB) Resiliencia\nC) Elasticidad\nD) Orientaci\u00f3n a mensajes\nE) Consistencia", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}], "preguntas_libres": [{"numero": 6, "texto": "Explique c\u00f3mo la implementaci\u00f3n de un backpressure efectivo en una arquitectura reactiva puede prevenir el colapso del sistema ante picos de demanda inesperados.  Proporcione ejemplos concretos de mecanismos de backpressure.", "puntaje": 5, "respuestaAlumno": "", "respuestaProfesor": ""}], "casos_uso": [{"numero": 7, "descripcion": "Aqu\u00ed tienes los 5 casos de uso pr\u00e1cticos sobre arquitecturas reactivas, cada uno con su estructura espec\u00edfica:\n\n**1. Procesamiento de Pedidos en Tiempo Real en E-commerce**\n- **N\u00famero \u00fanico:** 1\n- **Escenario pr\u00e1ctico detallado:** Una plataforma de comercio electr\u00f3nico de alto tr\u00e1fico necesita procesar miles de pedidos por minuto, actualizar el inventario en tiempo real para todos los usuarios, y gestionar la comunicaci\u00f3n as\u00edncrona con m\u00faltiples pasarelas de pago y servicios de env\u00edo. La lentitud en cualquier parte del proceso no debe bloquear el sistema ni afectar la experiencia del usuario en otras operaciones.\n- **Requisitos espec\u00edficos:** Dise\u00f1a el flujo de procesamiento de un pedido utilizando principios reactivos.\n    1.  Define un caso de uso reactivo para la actualizaci\u00f3n y visualizaci\u00f3n del inventario disponible a medida que los productos son comprados por diferentes usuarios simult\u00e1neamente. \u00bfC\u00f3mo se maneja la concurrencia y la propagaci\u00f3n r\u00e1pida del estado de stock?\n    2.  Define un caso de uso reactivo para el flujo completo de un pedido, desde que el usuario hace clic en \"Comprar\" hasta la notificaci\u00f3n de env\u00edo. \u00bfC\u00f3mo se gestionan las dependencias externas lentas (como pasarelas de pago) sin bloquear el sistema principal?\n- **Sugerencias de herramientas o enfoques:** Spring WebFlux, Akka, Reactor, Kafka, RabbitMQ, patr\u00f3n Saga.\n\n**2. Ingesta y An\u00e1lisis de Datos de IoT a Gran Escala**\n- **N\u00famero \u00fanico:** 2\n- **Escenario pr\u00e1ctico detallado:** Una empresa gestiona una red masiva de dispositivos IoT (sensores, medidores, etc.) que env\u00edan datos de telemetr\u00eda continuamente. El volumen de datos es enorme y var\u00eda, con picos inesperados. Se necesita un sistema capaz de ingerir estos datos de forma fiable, procesarlos en tiempo real para detecci\u00f3n de anomal\u00edas y almacenar un historial para an\u00e1lisis posterior. La p\u00e9rdida de datos o la incapacidad de procesar picos de tr\u00e1fico son cr\u00edticas.\n- **Requisitos espec\u00edficos:** Dise\u00f1a la arquitectura de ingesta y procesamiento inicial de datos de IoT.\n    1.  Define un caso de uso reactivo para la ingesta de datos desde millones de dispositivos IoT. \u00bfC\u00f3mo se asegura que el sistema puede absorber la alta velocidad y el volumen variable de datos sin caerse, aplicando principios de backpressure?\n    2.  Define un caso de uso reactivo para el procesamiento inicial en tiempo real de los datos ingeridos (ej. filtrado, normalizaci\u00f3n, agregaci\u00f3n simple). \u00bfC\u00f3mo se garantiza la tolerancia a fallos en este paso si uno de los procesadores falla temporalmente?\n- **Sugerencias de herramientas o enfoques:** Kafka, Apache Flink, Akka Streams, Reactive Streams, MQTT, Protocolos basados en flujos.\n\n**3. Plataforma de Trading Financiero de Baja Latencia**\n- **N\u00famero \u00fanico:** 3\n- **Escenario pr\u00e1ctico detallado:** Una plataforma de trading online recibe flujos continuos de datos de mercado (precios, volumen) de m\u00faltiples bolsas y debe permitir a los usuarios ejecutar \u00f3rdenes de compra/venta con la menor latencia posible. El sistema debe ser extremadamente r\u00e1pido, concurrente y capaz de reaccionar instant\u00e1neamente a los cambios del mercado y a las \u00f3rdenes de los usuarios, sin perder datos ni bloquearse bajo alta carga o fallos externos.\n- **Requisitos espec\u00edficos:** Dise\u00f1a los componentes centrales de la plataforma de trading que manejan datos de mercado y \u00f3rdenes.\n    1.  Define un caso de uso reactivo para la recepci\u00f3n y procesamiento de flujos de datos de mercado (tickers, cotizaciones). \u00bfC\u00f3mo se maneja el alto volumen y la velocidad de estos datos para actualizar la vista de precios en tiempo real para todos los usuarios suscritos?\n    2.  Define un caso de uso reactivo para la ejecuci\u00f3n de una orden de trading una vez que se recibe la se\u00f1al del usuario o de un algoritmo. \u00bfC\u00f3mo se minimiza la latencia y se gestionan las respuestas as\u00edncronas de las bolsas externas de forma eficiente y resiliente?\n- **Sugerencias de herramientas o enfoques:** Aeron, LMAX Disruptor (patr\u00f3n), Akka, ReactiveX, ZeroMQ, WebSockets.\n\n**4. Sistema de Notificaciones y Feeds en Red Social**\n- **N\u00famero \u00fanico:** 4\n- **Escenario pr\u00e1ctico detallado:** Una red social con millones de usuarios activos necesita entregar actualizaciones de contenido (posts, comentarios) a los feeds de los seguidores y enviar notificaciones en tiempo real sobre interacciones (likes, menciones). El desaf\u00edo es escalar para manejar la propagaci\u00f3n de informaci\u00f3n a un gran n\u00famero de usuarios simult\u00e1neamente y asegurar la entrega r\u00e1pida y fiable de notificaciones sin sobrecargar los servidores o los dispositivos de los usuarios.\n- **Requisitos espec\u00edficos:** Dise\u00f1a el sistema de distribuci\u00f3n de contenido y notificaciones.\n    1.  Define un caso de uso reactivo para la distribuci\u00f3n de contenido al feed personalizado de un usuario. \u00bfC\u00f3mo se maneja el \"problema del fan-out\" (un usuario popular que publica algo que debe llegar a millones de seguidores) de manera eficiente y escalable?\n    2.  Define un caso de uso reactivo para el env\u00edo de notificaciones en tiempo real a los usuarios sobre interacciones relevantes. \u00bfC\u00f3mo se mantienen activas millones de conexiones simult\u00e1neas y se empujan las notificaciones de forma fiable y con baja latencia?\n- **Sugerencias de herramientas o enfoques:** Kafka, Apache Cassandra, WebSockets, Server-Sent Events (SSE), Redis Pub/Sub, Akka.\n\n**5. Pipeline de Procesamiento de Logs y Eventos Centralizado**\n- **N\u00famero \u00fanico:** 5\n- **Escenario pr\u00e1ctico detallado:** Una organizaci\u00f3n opera cientos de microservicios y servidores que generan grandes vol\u00famenes de logs y eventos de auditor\u00eda. Se necesita un sistema centralizado para recolectar, agregar, transformar, filtrar y enrutar estos datos a diferentes destinos (almacenamiento a largo plazo, sistemas de monitoreo, plataformas de an\u00e1lisis). El sistema debe ser capaz de manejar picos de tr\u00e1fico de logs y garantizar que no se pierdan datos importantes.\n- **Requisitos espec\u00edficos:** Dise\u00f1a el pipeline de procesamiento de logs y eventos.\n    1.  Define un caso de uso reactivo para la ingesta de logs y eventos desde m\u00faltiples fuentes distribuidas y heterog\u00e9neas. \u00bfC\u00f3mo se maneja la variabilidad en el volumen y formato de los datos de entrada y se aplica backpressure si los sistemas de procesamiento intermedios se saturan?\n    2.  Define un caso de uso reactivo para la transformaci\u00f3n y enrutamiento condicional de los eventos procesados a diferentes destinos. \u00bfC\u00f3mo se asegura que la l\u00f3gica de transformaci\u00f3n se aplica de forma resiliente y que los eventos llegan a su destino correcto incluso si uno de los destinos est\u00e1 temporalmente no disponible?\n- **Sugerencias de herramientas o enfoques:** Kafka, Apache Flink, Logstash, Fluentd, Reactive Streams, Elasticsearch, S3.", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 10, "respuestaAlumno": "", "archivoSubido": false, "respuestaProfesor": ""}]}, "createdAt": "2025-05-21T17:31:32.899767", "expiration": "2025-05-28T22:31:32.869Z", "publicAccess": true}
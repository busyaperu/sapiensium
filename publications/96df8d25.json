{"id": "96df8d25", "examenData": {"examen_id": "265580", "nombre_examen": "Programaci\u00f3n UML", "tipo_examen": "Evaluaci\u00f3n", "fecha": "2025-04-28T20:14:15.543Z", "nombre_profesor": "Mariela Isabel Camargo Rom\u00e1n", "profesor_id": "16MI987", "preguntas_marcar": [{"numero": 1, "texto": "\u00bfCu\u00e1l de los siguientes es un principio clave de los sistemas reactivos?  \nA) Tolerancia al fracaso  \nB) Centralizaci\u00f3n de procesos  \nC) Latencia predecible  \nD) Bloques monol\u00edticos  \nE) Sincronizaci\u00f3n obligatoria", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 2, "texto": "\u00bfQu\u00e9 patr\u00f3n es com\u00fan en arquitecturas reactivas para manejar flujos de datos?  \nA) Singleton  \nB) Observer  \nC) Factory  \nD) Prototype  \nE) Adapter", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 3, "texto": "\u00bfQu\u00e9 tecnolog\u00eda se usa frecuentemente para implementar sistemas reactivos?  \nA) React.js  \nB) Apache Kafka  \nC) MySQL  \nD) Docker  \nE) HTML5", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 4, "texto": "\u00bfCu\u00e1l es el beneficio principal del modelo de mensajer\u00eda as\u00edncrona en sistemas reactivos?  \nA) Mayor complejidad en el c\u00f3digo  \nB) Reducci\u00f3n de acoplamiento entre componentes  \nC) Dependencia de tiempos de respuesta fijos  \nD) Requerimiento de hardware especializado  \nE) Limitaci\u00f3n en la escalabilidad horizontal", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 5, "texto": "\u00bfQu\u00e9 concepto es esencial en la programaci\u00f3n reactiva para manejar flujos de datos?  \nA) Herencia m\u00faltiple  \nB) Streams  \nC) Variables globales  \nD) Bucles infinitos  \nE) Polimorfismo", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}], "preguntas_libres": [{"numero": 6, "texto": "**Intermedio:** Compara las arquitecturas reactivas con las arquitecturas tradicionales basadas en petici\u00f3n-respuesta. Describe con ejemplos concretos en qu\u00e9 escenarios una arquitectura reactiva ser\u00eda m\u00e1s beneficiosa.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 7, "texto": "**Intermedio-Avanzado:** \u00bfC\u00f3mo manejan las arquitecturas reactivas el fallo de un componente sin afectar todo el sistema? Explica detalladamente los mecanismos de resiliencia y su implementaci\u00f3n en un framework como Akka o Spring WebFlux.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 8, "texto": "**Avanzado:** Analiza los desaf\u00edos de escalabilidad en sistemas reactivos, especialmente en entornos distribuidos. \u00bfQu\u00e9 estrategias o patrones (ej: Event Sourcing, CQRS) pueden aplicarse para mitigar estos desaf\u00edos?", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 9, "texto": "**Avanzado:** Describe c\u00f3mo se logra la reactividad en el manejo de flujos de datos as\u00edncronos. Proporciona un ejemplo pr\u00e1ctico utilizando operadores de Reactor o RxJava para transformar y combinar flujos de manera eficiente.", "puntaje": 1, "respuestaAlumno": ""}], "casos_uso": [{"numero": 10, "descripcion": "**1. Escenario:** Una plataforma de streaming necesita manejar picos de demanda durante el lanzamiento de un nuevo show. El sistema debe escalar autom\u00e1ticamente para evitar ca\u00eddas y garantizar baja latencia.  \n**Requisitos:**  \n- Implementar un sistema reactivo que escale horizontalmente basado en m\u00e9tricas de carga.  \n- Usar circuit breakers para manejar fallos en microservicios de recomendaci\u00f3n.  \n**Herramientas sugeridas:** Akka, Kafka, Kubernetes, Prometheus.  \n\n", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 1, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-04-28T15:14:15.565538", "expiration": "2025-05-05T20:14:15.543Z", "publicAccess": true}
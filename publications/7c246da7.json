{"id": "7c246da7", "examenData": {"id": "932360", "fecha": "2025-04-08", "profesor": "Mariela Isabel Camargo Roman", "nombreAlumno": "", "idAlumno": "", "bloqueado": true, "preguntasMarcar": [{"numero": 1, "texto": "1-1) \u00bfCu\u00e1l de las siguientes es una caracter\u00edstica principal de las arquitecturas reactivas?", "puntaje": 1, "opciones": [{"texto": "A) Alta acoplamiento entre componentes", "valor": "A"}, {"texto": "B) Procesamiento en lotes (batch)", "valor": "B"}, {"texto": "C) Respuesta en tiempo real a eventos", "valor": "C"}, {"texto": "D) Uso exclusivo de bases de datos relacionales", "valor": "D"}, {"texto": "E) Dependencia de un \u00fanico servidor centralizado", "valor": "E"}], "respuestaSeleccionada": null}], "preguntasLibres": [{"numero": 1, "texto": "1-1. **Intermedio:** Explique las diferencias clave entre una arquitectura en capas tradicional (como MVC) y una arquitectura hexagonal (puertos y adaptadores). Incluya en su respuesta ventajas, desventajas y casos de uso recomendados para cada enfoque.", "puntaje": 1, "respuestaAlumno": ""}], "casosUso": [{"numero": 1, "descripcion": "**Caso de Uso 1-1:**  \n\n**Escenario pr\u00e1ctico:**  \nUna plataforma de comercio electr\u00f3nico necesita manejar picos de tr\u00e1fico durante eventos de ventas flash, garantizando alta disponibilidad y respuestas en tiempo real para actualizaciones de inventario y notificaciones a los usuarios.  \n\n**Preguntas de caso de uso:**  \n1. \u00bfC\u00f3mo dise\u00f1ar\u00edas un sistema reactivo para escalar autom\u00e1ticamente durante picos de demanda?  \n2. \u00bfQu\u00e9 estrategias usar\u00edas para garantizar la consistencia de datos en un entorno distribuido?  \n\n**Requisitos espec\u00edficos:**  \n- Implementar un sistema basado en mensajer\u00eda as\u00edncrona para actualizaciones de inventario.  \n- Usar patrones como Circuit Breaker para manejar fallos en servicios externos.  \n- Garantizar latencia m\u00ednima en notificaciones en tiempo real.  \n\n**Sugerencias de herramientas/enfoques:**  \n- Herramientas: Kafka, Akka, Spring WebFlux, Kubernetes (para escalado autom\u00e1tico).  \n- Enfoques: Event Sourcing, CQRS, replicaci\u00f3n de datos eventualmente consistente.", "pregunta": "Pregunta sobre el caso de uso", "puntaje": 1, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-04-07T20:10:06.909272", "expiration": "2025-04-15T01:10:06.883Z", "publicAccess": true}
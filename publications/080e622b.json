{"id": "080e622b", "examenData": {"examen_id": "320304", "nombre_examen": "Arquitecturas Reactivas", "tipo_examen": "Evaluaci\u00f3n", "fecha": "2025-05-31T22:29:39.628Z", "nombre_profesor": "Mariela Isabel Camargo Rom\u00e1n", "profesor_id": "16MI987", "preguntas_marcar": [{"numero": 1, "texto": "\u00bfQu\u00e9 patr\u00f3n de dise\u00f1o se utiliza a menudo para manejar la concurrencia en arquitecturas reactivas?\nA) Singleton\nB) Factory\nC) Actor\nD) Observer\nE) Strategy", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 2, "texto": "Un backpressure en una arquitectura reactiva se refiere a:\nA) La alta latencia en la respuesta del sistema.\nB) La incapacidad de un componente para procesar datos a la velocidad a la que se le env\u00edan.\nC) El fallo de un componente en el sistema.\nD) La alta demanda de recursos del sistema.\nE) La falta de comunicaci\u00f3n entre componentes.", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 3, "texto": "\u00bfCu\u00e1l de las siguientes tecnolog\u00edas es com\u00fanmente usada para implementar arquitecturas reactivas?\nA) Spring MVC\nB) Spring Boot\nC) Spring WebFlux\nD) Struts\nE) JSF", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 4, "texto": "El concepto de \"elasticidad\" en una arquitectura reactiva se refiere a la capacidad de:\nA) Recuperarse de fallos.\nB) Ajustar los recursos seg\u00fan la demanda.\nC) Responder r\u00e1pidamente a las solicitudes.\nD) Comunicarse eficientemente entre componentes.\nE) Procesar grandes vol\u00famenes de datos.", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 5, "texto": "\u00bfQu\u00e9 tipo de datos es com\u00fanmente utilizado en las arquitecturas reactivas para la transmisi\u00f3n de eventos?\nA) Mapas\nB) Listas\nC) Flujos (Streams)\nD) Conjuntos\nE) Pilas", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}], "preguntas_libres": [{"numero": 6, "texto": "Explique c\u00f3mo la programaci\u00f3n reactiva y el patr\u00f3n de dise\u00f1o del reactor ayudan a mejorar la escalabilidad y la resistencia a fallos en una aplicaci\u00f3n distribuida.  Proporcione ejemplos concretos.", "puntaje": 1, "respuestaAlumno": "", "archivoId": "anexo_284879_1748470036329", "archivoNombre": "Diagrama sin t\u00edtulo.drawio.pdf", "archivoUrl": "https://cloud.appwrite.io/v1/storage/buckets/APPWRITE_BUCKET_DOCUMENTO_ANEXO_EXAMEN/files/anexo_284879_1748470036329/view?project=67e565df00172171560", "archivoTama\u00f1o": 2352, "archivoTipo": "application/pdf"}, {"numero": 7, "texto": "Analice el rol de los patrones de dise\u00f1o como el \"Backpressure\" y el \"Circuit Breaker\" en la gesti\u00f3n del flujo de datos y la prevenci\u00f3n de problemas de congesti\u00f3n en arquitecturas reactivas.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 8, "texto": "Compare y contraste dos frameworks o librer\u00edas diferentes para construir aplicaciones reactivas (ej. Spring WebFlux y Akka Streams).  \u00bfCu\u00e1les son las consideraciones clave al elegir entre ellos para un proyecto espec\u00edfico?", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 9, "texto": "Dise\u00f1e una arquitectura reactiva para una aplicaci\u00f3n de comercio electr\u00f3nico que deba manejar un alto volumen de transacciones concurrentes, incluyendo la gesti\u00f3n de eventos, la persistencia de datos y la comunicaci\u00f3n entre microservicios.  Detalle las tecnolog\u00edas y patrones de dise\u00f1o que utilizar\u00eda y justifique sus elecciones.", "puntaje": 1, "respuestaAlumno": ""}], "casos_uso": [{"numero": 10, "descripcion": "**Escenario:** Chat en Tiempo Real con Soporte para Grupos Grandes. Una aplicaci\u00f3n de mensajer\u00eda necesita soportar conversaciones en tiempo real con miles de usuarios en un mismo grupo.\n\n    **Pregunta 1:** \u00bfC\u00f3mo implementar un sistema de difusi\u00f3n de mensajes eficiente para enviar mensajes a miles de usuarios simult\u00e1neamente sin sobrecargar el servidor?\n    **Requisito:** Dise\u00f1ar un mecanismo de difusi\u00f3n que garantice la entrega de mensajes a todos los usuarios del grupo de manera r\u00e1pida y escalable.\n    **Herramientas/Enfoques:** WebSockets, Redis Pub/Sub, MQTT.\n\n    **Pregunta 2:** \u00bfC\u00f3mo gestionar la concurrencia y evitar conflictos al actualizar el estado del grupo (miembros, configuraci\u00f3n, etc.) en un entorno distribuido?\n    **Requisito:** Implementar un sistema de gesti\u00f3n de estado que garantice la consistencia y evite la corrupci\u00f3n de datos en un entorno de alta concurrencia.\n    **Herramientas/Enfoques:** Actores (Akka), STM (Software Transactional Memory).", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 1, "respuestaAlumno": "", "archivoSubido": false, "archivoId": "anexo_284879_1748469930521", "archivoNombre": "Documentos-de-embarque.pdf", "archivoUrl": "https://cloud.appwrite.io/v1/storage/buckets/APPWRITE_BUCKET_DOCUMENTO_ANEXO_EXAMEN/files/anexo_284879_1748469930521/view?project=67e565df00172171560", "archivoTama\u00f1o": 168651, "archivoTipo": "application/pdf"}, {"numero": 11, "descripcion": "**Escenario:** Proceso de Pedidos en un E-commerce. Una tienda online necesita procesar un gran volumen de pedidos de forma concurrente, gestionando inventario, pagos y env\u00edos.\n\n    **Pregunta 1:** \u00bfC\u00f3mo orquestar el flujo de trabajo del pedido (validaci\u00f3n, pago, inventario, env\u00edo) de forma as\u00edncrona y resiliente a fallos en los servicios externos?\n    **Requisito:** Implementar un sistema que gestione el proceso de pedido de forma robusta, recuper\u00e1ndose autom\u00e1ticamente de errores y garantizando la finalizaci\u00f3n del proceso.\n    **Herramientas/Enfoques:** Saga Pattern, Orchestration-based Saga, Choreography-based Saga.\n\n    **Pregunta 2:** \u00bfC\u00f3mo mantener la disponibilidad del servicio de inventario durante picos de demanda (Black Friday, Cyber Monday) sin comprometer la consistencia de los datos?\n    **Requisito:** Dise\u00f1ar una estrategia para escalar el servicio de inventario y manejar la concurrencia masiva sin causar cuellos de botella ni errores de stock.\n    **Herramientas/Enfoques:** CQRS, Eventual Consistency, Sharding.", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 1, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-05-31T17:29:39.667622", "expiration": "2025-06-07T22:29:39.628Z", "publicAccess": true}
{"id": "157d80fb", "examenData": {"id": "207161", "fecha": "2025-04-11", "profesor": "Mariela Isabel Camargo Roman", "nombreAlumno": "", "idAlumno": "", "bloqueado": true, "preguntasMarcar": [{"numero": 1, "texto": "1-1) \u00bfCu\u00e1l de los siguientes es un principio fundamental de las arquitecturas reactivas?", "puntaje": 1, "opciones": [{"texto": "A) Acoplamiento fuerte entre componentes", "valor": "A"}, {"texto": "B) Tolerancia a fallos mediante aislamiento", "valor": "B"}, {"texto": "C) Sincronizaci\u00f3n estricta de procesos", "valor": "C"}, {"texto": "D) Centralizaci\u00f3n del manejo de datos", "valor": "D"}, {"texto": "E) Uso exclusivo de bases de datos relacionales", "valor": "E"}], "respuestaSeleccionada": 0}], "preguntasLibres": [{"numero": 1, "texto": "1-1. **Avanzado:** Analiza c\u00f3mo la implementaci\u00f3n de una arquitectura reactiva basada en eventos puede mejorar la escalabilidad y resiliencia en un sistema de comercio electr\u00f3nico con alta concurrencia. Describe los componentes clave (ej. brokers de mensajes, patrones como CQRS o Event Sourcing) y c\u00f3mo interact\u00faan para manejar fallos y picos de carga. Incluye ejemplos de tecnolog\u00edas espec\u00edficas (ej. Kafka, Akka) y justifica su selecci\u00f3n.", "puntaje": 1, "respuestaAlumno": ""}], "casosUso": [{"numero": 1, "descripcion": "**Caso de uso 1-1:**  \n\n- **Escenario pr\u00e1ctico:**  \n  Un equipo de desarrollo necesita construir un sistema de procesamiento de pedidos en tiempo real para un e-commerce. El sistema debe manejar picos de demanda durante eventos como el Black Friday, garantizando alta disponibilidad y respuestas inmediatas a los usuarios.  \n\n- **Preguntas de caso de uso:**  \n  1. \u00bfC\u00f3mo dise\u00f1ar\u00edas una arquitectura reactiva para manejar el flujo de pedidos, asegurando escalabilidad y tolerancia a fallos?  \n  2. \u00bfQu\u00e9 patrones reactivos (ej. Event Sourcing, CQRS) aplicar\u00edas para mantener la consistencia de datos entre el inventario y los pedidos?  \n\n- **Requisitos espec\u00edficos:**  \n  - Implementar un servicio de pedidos que reaccione a eventos de compra.  \n  - Garantizar que el inventario se actualice correctamente tras cada pedido.  \n  - Usar mecanismos de backpressure para manejar picos de carga.  \n\n- **Sugerencias de herramientas/enfoques:**  \n  - Herramientas: Akka, Kafka, Spring WebFlux.  \n  - Enfoques: Microservicios reactivos, streams de eventos.", "pregunta": "Pregunta sobre el caso de uso", "puntaje": 1, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-04-11T19:01:14.160997", "expiration": "2025-04-19T00:01:14.134Z", "publicAccess": true}
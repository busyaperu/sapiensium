{"id": "d4e6fc28", "examenData": {"examen_id": "141590", "nombre_examen": "Arquitecturas Reactivas", "tipo_examen": "Evaluaci\u00f3n", "fecha": "2025-05-26T14:25:26.784Z", "nombre_profesor": "Mariela Isabel Camargo Rom\u00e1n", "profesor_id": "16MI987", "preguntas_marcar": [{"numero": 1, "texto": "\u00bfQu\u00e9 patr\u00f3n de dise\u00f1o se utiliza frecuentemente en arquitecturas reactivas para manejar la concurrencia de forma as\u00edncrona y no bloqueante?\nA) Singleton\nB) Factory\nC) Observer\nD) Actor\nE) Strategy", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 2, "texto": "Un componente reactivo falla. \u00bfQu\u00e9 caracter\u00edstica de una arquitectura reactiva ayuda a mitigar el impacto de esta falla?\nA) Elasticidad\nB) Responsividad\nC) Mensajer\u00eda as\u00edncrona\nD) Resiliencia\nE) Programaci\u00f3n funcional", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 3, "texto": "\u00bfCu\u00e1l de las siguientes tecnolog\u00edas es ampliamente utilizada para implementar arquitecturas reactivas?\nA)  JDBC\nB)  Spring MVC\nC)  Apache Kafka\nD)  Servlet\nE)  JSP", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 4, "texto": "\u00bfQu\u00e9 concepto describe la capacidad de una arquitectura reactiva para adaptarse a cambios en la carga de trabajo?\nA) Resiliencia\nB) Responsividad\nC) Elasticidad\nD) Mensajer\u00eda\nE) Modularidad", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 5, "texto": "\u00bfCu\u00e1l es el beneficio principal del uso de la programaci\u00f3n reactiva en arquitecturas reactivas?\nA) Mejor rendimiento de base de datos\nB) Mayor facilidad de debugging\nC) Manejo eficiente de la concurrencia\nD) Reducci\u00f3n del consumo de memoria\nE) Simplificaci\u00f3n de la l\u00f3gica de negocio", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 6, "texto": "\u00bfQu\u00e9 patr\u00f3n de dise\u00f1o se utiliza com\u00fanmente para manejar la concurrencia en sistemas reactivos?\nA) Singleton\nB) Factory\nC) Actor\nD) Observer\nE) Template Method", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 7, "texto": "\u00bfCu\u00e1l es la principal ventaja del uso de un backpressure en un sistema reactivo?\nA) Mayor velocidad de procesamiento\nB) Menor latencia\nC) Prevenci\u00f3n de sobrecarga del sistema\nD) Aumento de la concurrencia\nE) Simplificaci\u00f3n del c\u00f3digo", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 8, "texto": "\u00bfQu\u00e9 tecnolog\u00eda es ampliamente utilizada para implementar sistemas reactivos?\nA) Spring MVC\nB) Jakarta Servlet\nC) Spring WebFlux\nD) Struts\nE) JSF", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 9, "texto": "\u00bfCu\u00e1l de las siguientes afirmaciones sobre los sistemas reactivos es FALSA?\nA) Son altamente escalables.\nB) Son f\u00e1ciles de depurar.\nC) Son resilientes a fallos.\nD) Son basados en eventos.\nE) Son as\u00edncronos.", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 10, "texto": "\u00bfQu\u00e9 concepto permite la composici\u00f3n de flujos de datos en un sistema reactivo?\nA) Backpressure\nB) Operadores\nC) Concurrencia\nD) Resiliencia\nE) Elasticidad", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 11, "texto": "\u00bfQu\u00e9 patr\u00f3n de dise\u00f1o se utiliza com\u00fanmente en arquitecturas reactivas para manejar flujos de datos as\u00edncronos?\nA) Singleton\nB) Factory\nC) Observer\nD) Strategy\nE) Decorator", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 12, "texto": "\u00bfCu\u00e1l es la principal ventaja de utilizar un backpressure en una arquitectura reactiva?\nA) Mayor velocidad de procesamiento\nB) Menor latencia\nC) Prevenci\u00f3n de sobrecarga del sistema\nD) Mejor gesti\u00f3n de errores\nE) Aumento del rendimiento de la base de datos", "puntaje": 0.5, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 13, "texto": "\u00bfQu\u00e9 tecnolog\u00eda es ampliamente utilizada para la implementaci\u00f3n de arquitecturas reactivas?\nA) Spring MVC\nB) Apache Tomcat\nC) Reactor\nD) Struts\nE) JSF", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 14, "texto": "\u00bfCu\u00e1l de las siguientes afirmaciones sobre la elasticidad en una arquitectura reactiva es FALSA?\nA) Permite escalar recursos seg\u00fan la demanda.\nB) Reduce costos al optimizar el uso de recursos.\nC) Garantiza un tiempo de respuesta constante.\nD) Se adapta a cambios en la carga de trabajo.\nE) Mejora la resiliencia del sistema.", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 15, "texto": "\u00bfQu\u00e9 concepto describe la capacidad de un sistema reactivo para continuar funcionando a pesar de fallos?\nA) Elasticidad\nB) Responsividad\nC) Resiliencia\nD) Basado en Mensajes\nE) Tolerancia a fallos", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 16, "texto": "\u00bfQu\u00e9 patr\u00f3n de dise\u00f1o se utiliza a menudo en arquitecturas reactivas para manejar la concurrencia?\nA) Singleton\nB) Factory\nC) Actor\nD) Observer\nE) Strategy", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 17, "texto": "\u00bfCu\u00e1l es la principal ventaja de utilizar un backpressure en una arquitectura reactiva?\nA) Mayor velocidad de procesamiento\nB) Menor latencia\nC) Prevenci\u00f3n de sobrecarga del sistema\nD) Aumento del rendimiento\nE) Simplificaci\u00f3n del c\u00f3digo", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 18, "texto": "\u00bfQu\u00e9 tecnolog\u00eda es com\u00fanmente utilizada para implementar flujos de datos reactivos?\nA) JDBC\nB) Spring MVC\nC) RxJava\nD) Hibernate\nE) JPA", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 19, "texto": "\u00bfCu\u00e1l de las siguientes afirmaciones sobre la resiliencia en arquitecturas reactivas es FALSA?\nA)  Se basa en la tolerancia a fallos.\nB)  Implica la capacidad de recuperarse de errores.\nC)  Requiere una arquitectura monol\u00edtica.\nD)  Utiliza mecanismos de aislamiento de fallos.\nE)  Permite la continuaci\u00f3n del servicio a pesar de fallos.", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 20, "texto": "\u00bfQu\u00e9 concepto permite que una arquitectura reactiva se adapte a cambios en la carga?\nA)  Resiliencia\nB)  Elasticidad\nC)  Responsividad\nD)  Orientaci\u00f3n a Mensajes\nE)  Backpressure", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}], "preguntas_libres": [{"numero": 21, "texto": "**Intermedio**: Compara las arquitecturas reactivas con las arquitecturas tradicionales basadas en bloqueo, destacando c\u00f3mo manejan la escalabilidad y la resiliencia en entornos distribuidos.", "puntaje": 0.7, "respuestaAlumno": ""}, {"numero": 22, "texto": "**Intermedio-Avanzado**: Analiza el papel de los *backpressure* en los sistemas reactivos y describe estrategias para implementarlo en un flujo de datos as\u00edncrono.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 23, "texto": "**Avanzado**: Discute c\u00f3mo se puede garantizar la consistencia eventual en un sistema reactivo distribuido y qu\u00e9 patrones o t\u00e9cnicas son esenciales para lograrlo.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 24, "texto": "**Avanzado**: Dise\u00f1a un ejemplo pr\u00e1ctico donde apliques el patr\u00f3n *Event Sourcing* junto con *CQRS* en una arquitectura reactiva, explicando c\u00f3mo interact\u00faan estos componentes para mejorar el rendimiento y la trazabilidad.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 25, "texto": "**Intermedio**: Compara el modelo de actores con el patr\u00f3n Observer en el contexto de las arquitecturas reactivas, destacando ventajas, desventajas y casos de uso t\u00edpicos para cada enfoque.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 26, "texto": "**Avanzado**: Analiza c\u00f3mo el *backpressure* maneja problemas de congesti\u00f3n en sistemas reactivos y prop\u00f3n una implementaci\u00f3n pr\u00e1ctica usando un framework como Akka o Project Reactor.", "puntaje": 1, "respuestaAlumno": ""}], "casos_uso": [{"numero": 27, "descripcion": "- Escenario Pr\u00e1ctico Detallado: Una plataforma de streaming de video global experimenta picos masivos de tr\u00e1fico durante los lanzamientos de series populares o eventos en vivo. La infraestructura actual lucha por escalar r\u00e1pidamente, lo que provoca buffering, latencia y, en ocasiones, ca\u00eddas del servicio para millones de usuarios concurrentes en diferentes regiones geogr\u00e1ficas. Necesitan redise\u00f1ar el sistema para manejar esta carga impredecible y ofrecer una experiencia de usuario fluida y continua.\n - Requisitos Espec\u00edficos: Basado en este escenario, genera 2 preguntas pr\u00e1cticas y distintas sobre la aplicaci\u00f3n o los desaf\u00edos de los principios de la arquitectura reactiva (Responsiveness, Resilience, Elasticity, Message-Driven) en este escenario. Cada pregunta debe abordar un aspecto diferente del escenario.\n - Sugerencias de Herramientas o Enfoques: Akka, Spring WebFlux, Kafka, Kubernetes, Microservicios, Circuit Breakers.\n\n", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 5, "respuestaAlumno": "", "archivoSubido": false}, {"numero": 28, "descripcion": "- Escenario pr\u00e1ctico detallado: Una plataforma de trading online necesita mostrar los precios de las acciones en tiempo real a miles de usuarios concurrentes. Los precios se actualizan muy frecuentemente y el servicio backend debe empujar estas actualizaciones a los clientes conectados (v\u00eda web o m\u00f3vil) tan pronto como est\u00e9n disponibles, sin que la carga de muchos clientes bloquee la recepci\u00f3n o el procesamiento de nuevos precios.\n    - Requisitos espec\u00edficos de lo que debe implementar el estudiante: Desarrollar un servicio backend que reciba un flujo de actualizaciones de precios y utilice un enfoque reactivo para difundir eficientemente estas actualizaciones a m\u00faltiples suscriptores (clientes). La soluci\u00f3n debe ser escalable en el n\u00famero de clientes conectados.\n    - Sugerencias de herramientas o enfoques que podr\u00eda utilizar: Spring WebFlux con WebSockets o Server-Sent Events (SSE), Vert.x, Netty, Project Reactor, RxJava.", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 5, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-05-26T09:25:26.856468", "expiration": "2025-06-02T14:25:26.784Z", "publicAccess": true}
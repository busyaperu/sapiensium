{"id": "d5c97ac2", "examenData": {"examen_id": "889992", "nombre_examen": "Programaci\u00f3n UML", "tipo_examen": "Evaluaci\u00f3n", "fecha": "2025-04-22T01:35:44.123Z", "nombre_profesor": "Mariela Isabel Camargo Rom\u00e1n", "profesor_id": "16MI987", "preguntas_marcar": [{"numero": 1, "texto": "\u00bfQu\u00e9 patr\u00f3n de dise\u00f1o reactivo se enfoca en manejar flujos de datos asincr\u00f3nicos?  \nA) Singleton  \nB) Observer  \nC) Factory  \nD) Decorator  \nE) Adapter", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 2, "texto": "\u00bfCu\u00e1l de estos frameworks es ampliamente utilizado para construir sistemas reactivos?  \nA) Django  \nB) Spring Boot  \nC) Reactor  \nD) Hibernate  \nE) JUnit", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 3, "texto": "\u00bfQu\u00e9 caracter\u00edstica es esencial en una arquitectura reactiva para garantizar escalabilidad?  \nA) Estado compartido  \nB) Bloqueo de hilos  \nC) Elasticidad  \nD) Acoplamiento temporal  \nE) Procesamiento por lotes", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 4, "texto": "\u00bfQu\u00e9 componente de Reactive Streams se encarga de controlar la presi\u00f3n de retroceso (backpressure)?  \nA) Publisher  \nB) Subscriber  \nC) Processor  \nD) Subscription  \nE) Transformer", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 5, "texto": "\u00bfCu\u00e1l de estas herramientas se usa com\u00fanmente para implementar programaci\u00f3n reactiva en JavaScript?  \nA) Angular  \nB) RxJS  \nC) Express  \nD) Redux  \nE) Lodash", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}], "preguntas_libres": [{"numero": 1, "texto": "**Intermedio:** Compara y contrasta las arquitecturas reactivas basadas en eventos con las arquitecturas tradicionales sincr\u00f3nicas, destacando ventajas, desventajas y casos de uso ideales para cada una.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 2, "texto": "**Avanzado:** Analiza c\u00f3mo el uso de *message-driven components* en una arquitectura reactiva puede afectar la coherencia de los datos en sistemas distribuidos. Proporciona ejemplos concretos de estrategias para mitigar posibles inconsistencias.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 3, "texto": "**Intermedio:** Explica el rol de los *backpressure mechanisms* en sistemas reactivos y describe c\u00f3mo su implementaci\u00f3n puede prevenir la sobrecarga de recursos en escenarios de alta demanda.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 4, "texto": "**Avanzado:** Dise\u00f1a conceptualmente una arquitectura reactiva para un sistema de comercio electr\u00f3nico de alto tr\u00e1fico, detallando los componentes clave (ej.: brokers de mensajes, servicios reactivos) y c\u00f3mo garantizar\u00edan baja latencia y alta disponibilidad.", "puntaje": 1, "respuestaAlumno": ""}], "casos_uso": [{"numero": 1, "descripcion": "**Escenario**: Plataforma de monitoreo de sensores IoT en una f\u00e1brica, donde miles de dispositivos env\u00edan datos simult\u00e1neamente.  \n   - **Requisitos**:  \n     - Procesar flujos de datos en tiempo real con tolerancia a fallos y baja latencia.  \n     - Visualizar m\u00e9tricas agregadas (ej: temperatura promedio por zona) reactivamente.  \n   - **Herramientas sugeridas**: Apache Flink, Reactor, MQTT, Grafana para dashboards.", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 1, "respuestaAlumno": "", "archivoSubido": false}, {"numero": 2, "descripcion": "**Escenario**: Aplicaci\u00f3n de trading financiero que reacciona a cambios en el mercado en milisegundos.  \n   - **Requisitos**:  \n     - Implementar un motor de reglas reactivas para ejecutar \u00f3rdenes basadas en fluctuaciones de precios.  \n     - Garantizar cero p\u00e9rdida de mensajes durante fallos de red.  \n   - **Herramientas sugeridas**: Vert.x, RabbitMQ con confirmaciones, Redis para estado en memoria.", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 1, "respuestaAlumno": "", "archivoSubido": false}, {"numero": 3, "descripcion": "**Escenario**: Sistema de gesti\u00f3n de pedidos para un restaurante con actualizaciones en vivo para cocina y clientes.  \n   - **Requisitos**:  \n     - Sincronizar el estado de pedidos entre m\u00faltiples dispositivos (tablets, app m\u00f3vil) sin bloqueos.  \n     - Actualizar interfaces de usuario reactivamente ante cambios (ej: pedido listo).  \n   - **Herramientas sugeridas**: Elixir/Phoenix Channels, CQRS con Event Sourcing, React.js para el frontend.", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 1, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-04-21T20:35:44.141348", "expiration": "2025-04-29T01:35:44.123Z", "publicAccess": true}
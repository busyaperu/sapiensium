{"id": "73f8e05d", "examenData": {"id": "946784", "fecha": "2025-04-09", "profesor": "Mariela Isabel Camargo Roman", "nombreAlumno": "", "idAlumno": "", "bloqueado": true, "preguntasMarcar": [{"numero": 1, "texto": "1-1) \u00bfCu\u00e1l de los siguientes es un principio fundamental de las arquitecturas reactivas?", "puntaje": 1, "opciones": [{"texto": "A) Acoplamiento fuerte entre componentes", "valor": "A"}, {"texto": "B) Tolerancia al fallo", "valor": "B"}, {"texto": "C) Procesamiento por lotes", "valor": "C"}, {"texto": "D) Sincronizaci\u00f3n estricta", "valor": "D"}, {"texto": "E) Centralizaci\u00f3n del estado", "valor": "E"}], "respuestaSeleccionada": null}], "preguntasLibres": [{"numero": 1, "texto": "1-1. **Compara y contrasta** las arquitecturas en capas (por ejemplo, MVC o de 3 capas) con la arquitectura hexagonal (puertos y adaptadores). Explica en qu\u00e9 contextos ser\u00eda m\u00e1s recomendable cada una, mencionando ventajas, desventajas y posibles desaf\u00edos de implementaci\u00f3n. (Nivel: intermedio-avanzado)", "puntaje": 1, "respuestaAlumno": ""}], "casosUso": [{"numero": 1, "descripcion": "**Caso de uso 1-1**  \n**Escenario pr\u00e1ctico:**  \nUn sistema de reservas en tiempo real para un cine debe manejar picos de demanda durante los estrenos de pel\u00edculas populares. El sistema debe procesar solicitudes concurrentes, garantizar consistencia en los asientos disponibles y proporcionar respuestas inmediatas a los usuarios.  \n\n**Preguntas de casos de uso:**  \n1. \u00bfC\u00f3mo dise\u00f1ar\u00edas un sistema reactivo para manejar la alta concurrencia y evitar conflictos en las reservas?  \n2. \u00bfQu\u00e9 patrones reactivos utilizar\u00edas para garantizar la escalabilidad y la tolerancia a fallos?  \n\n**Requisitos espec\u00edficos:**  \n- Implementar un backend que use mensajer\u00eda as\u00edncrona para gestionar reservas.  \n- Asegurar que no se sobrescriban reservas mediante bloqueos optimistas o eventos.  \n- Proporcionar una API reactiva que notifique al usuario el estado de su reserva en tiempo real.  \n\n**Sugerencias de herramientas/enfoques:**  \n- Herramientas: Akka (Actor Model), Kafka (mensajer\u00eda), Spring WebFlux (API reactiva).  \n- Enfoques: Event Sourcing, CQRS, backpressure para manejar picos de demanda.", "pregunta": "Pregunta sobre el caso de uso", "puntaje": 1, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-04-09T18:57:52.547982", "expiration": "2025-04-16T23:57:52.511Z", "publicAccess": true}
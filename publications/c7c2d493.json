{"id": "c7c2d493", "examenData": {"examen_id": "269321", "nombre_examen": "Arquitecturas Reactivas", "tipo_examen": "Evaluaci\u00f3n", "fecha": "2025-05-28T12:20:57.350Z", "nombre_profesor": "Mariela Isabel Camargo Rom\u00e1n", "profesor_id": "16MI987", "preguntas_marcar": [{"numero": 1, "texto": "\u00bfQu\u00e9 patr\u00f3n de dise\u00f1o es crucial para manejar la concurrencia en sistemas reactivos?\nA) Singleton\nB) Factory\nC) Actor\nD) Observer\nE) Strategy", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 2, "texto": "\u00bfCu\u00e1l es la principal ventaja del uso de backpressure en sistemas reactivos?\nA) Mayor velocidad de procesamiento\nB) Menor latencia\nC) Prevenci\u00f3n de sobrecarga del sistema\nD) Mejor manejo de errores\nE) Simplificaci\u00f3n del c\u00f3digo", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 3, "texto": "\u00bfQu\u00e9 tecnolog\u00eda es ampliamente utilizada para implementar flujos de datos reactivos?\nA) JDBC\nB) Spring MVC\nC) RxJava\nD) Hibernate\nE) JPA", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 4, "texto": "\u00bfCu\u00e1l de las siguientes afirmaciones sobre la elasticidad en arquitecturas reactivas es FALSA?\nA) Permite escalar recursos seg\u00fan la demanda.\nB) Mejora la eficiencia de los recursos.\nC) Reduce los costos operativos.\nD) Implica una configuraci\u00f3n fija de recursos.\nE) Permite manejar picos de carga.", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 5, "texto": "\u00bfQu\u00e9 caracter\u00edstica clave distingue a los sistemas reactivos de los sistemas tradicionales?\nA) Uso de bases de datos relacionales\nB) Manejo as\u00edncrono de eventos\nC) Programaci\u00f3n imperativa\nD) Dependencia de un \u00fanico punto de fallo\nE) Procesamiento s\u00edncrono", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}], "preguntas_libres": [{"numero": 6, "texto": "**Intermedio**: Analiza c\u00f3mo el patr\u00f3n *Event Sourcing* puede integrarse en una arquitectura reactiva para manejar el estado de una aplicaci\u00f3n. Proporciona un ejemplo concreto de implementaci\u00f3n.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 7, "texto": "**Intermedio-Avanzado**: Compara el manejo de fallos en sistemas reactivos usando *Circuit Breaker* versus *Retry Patterns*. \u00bfEn qu\u00e9 escenarios es m\u00e1s adecuado cada uno? Justifica tu respuesta con ejemplos.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 8, "texto": "**Avanzado**: Describe c\u00f3mo se implementar\u00eda un sistema de procesamiento de flujos de datos en tiempo real usando *Akka Streams* o *Project Reactor*. Incluye consideraciones sobre backpressure y escalabilidad.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 9, "texto": "**Avanzado**: \u00bfQu\u00e9 desaf\u00edos presenta la migraci\u00f3n de una arquitectura monol\u00edtica a una reactiva? Detalla estrategias para abordar la coexistencia de ambos sistemas durante la transici\u00f3n y c\u00f3mo manejar la deuda t\u00e9cnica.", "puntaje": 1, "respuestaAlumno": ""}], "casos_uso": [{"numero": 10, "descripcion": "**Escenario:** Un sistema de monitoreo de IoT recopila datos de miles de sensores remotos. **Pregunta 1:** \u00bfC\u00f3mo dise\u00f1ar una arquitectura reactiva para procesar eficientemente el flujo continuo de datos de los sensores, detectando anomal\u00edas en tiempo real? **Pregunta 2:** \u00bfC\u00f3mo implementar un sistema de almacenamiento de datos que pueda manejar el alto volumen y la velocidad de los datos del IoT, preservando la integridad de los datos? **Requisitos:** Implementar un sistema de procesamiento de eventos en tiempo real con baja latencia y alta confiabilidad. **Sugerencias:** Apache Kafka, Apache Flink, herramientas de visualizaci\u00f3n de datos en tiempo real.", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 5, "respuestaAlumno": "", "archivoSubido": false}, {"numero": 11, "descripcion": "**Escenario:** Una aplicaci\u00f3n de chat en tiempo real necesita manejar miles de usuarios concurrentes. **Pregunta 1:** \u00bfC\u00f3mo dise\u00f1ar una arquitectura reactiva para garantizar la entrega inmediata de mensajes entre usuarios, incluso con conexiones inestables? **Pregunta 2:** \u00bfC\u00f3mo implementar un mecanismo de manejo de presencia y notificaciones para que los usuarios sepan cu\u00e1ndo otros est\u00e1n en l\u00ednea o fuera de l\u00ednea? **Requisitos:** Implementar un sistema de chat en tiempo real escalable y robusto, con manejo eficiente de conexiones. **Sugerencias:** WebSockets, Spring WebSocket, bibliotecas de mensajer\u00eda en tiempo real.", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 5, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-05-28T07:20:57.412576", "expiration": "2025-06-04T12:20:57.350Z", "publicAccess": true}
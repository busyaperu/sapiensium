{"id": "d1f7b75b", "examenData": {"examen_id": "423633", "nombre_examen": "Arquitecturas Reactivas", "tipo_examen": "Evaluaci\u00f3n", "fecha": "2025-06-16T17:33:35.511Z", "nombre_profesor": "Mariela Isabel Camargo Rom\u00e1n", "profesor_id": "16MI765", "preguntas_marcar": [], "preguntas_libres": [{"numero": 1, "texto": "Describe los principios fundamentales de las arquitecturas reactivas y explica c\u00f3mo se diferencian de los enfoques de programaci\u00f3n tradicionales orientados a objetos.", "puntaje": 1, "respuestaAlumno": "", "respuestaProfesor": "Las arquitecturas reactivas se basan en cuatro principios fundamentales: **responsividad**, **elasticidad**, **resiliencia** y **orientaci\u00f3n a mensajes**. La responsividad garantiza tiempos de respuesta r\u00e1pidos y consistentes, crucial para una experiencia de usuario fluida. La elasticidad permite al sistema adaptarse a las fluctuaciones de carga, escalando recursos seg\u00fan sea necesario. La resiliencia asegura que el sistema siga funcionando incluso ante fallos, aislando los problemas y recuper\u00e1ndose r\u00e1pidamente. Finalmente, la orientaci\u00f3n a mensajes facilita la comunicaci\u00f3n as\u00edncrona entre componentes, desacopl\u00e1ndolos y mejorando la concurrencia.\n\nA diferencia de la programaci\u00f3n orientada a objetos tradicional, que se centra en el estado mutable y las llamadas a m\u00e9todos s\u00edncronas, las arquitecturas reactivas priorizan el flujo de datos as\u00edncrono e inmutable.  En lugar de invocar m\u00e9todos directamente, los componentes reaccionan a cambios en flujos de datos.  Esto promueve un dise\u00f1o m\u00e1s modular, escalable y tolerante a fallos, ideal para sistemas distribuidos y de alta concurrencia, en contraste con el enfoque m\u00e1s acoplado y secuencial de la POO tradicional.\n"}], "casos_uso": [{"numero": 1, "descripcion": "## Casos de Uso Pr\u00e1cticos: Arquitecturas Reactivas - Preguntas y Escenarios\n\n**1. Sistema de Monitorizaci\u00f3n de Sensores IoT**\n\n*   **Escenario:** Una empresa de agricultura inteligente utiliza una red de sensores IoT para monitorizar la humedad del suelo, la temperatura ambiente y la luz solar en sus campos. Los datos de los sensores llegan en flujos constantes y variables. Necesitan un sistema que procese estos datos en tiempo real para alertar a los agricultores sobre condiciones cr\u00edticas (ej., suelo demasiado seco) y para optimizar el riego.\n*   **Requisitos:** Implementa un sistema que reciba flujos de datos de sensores IoT, filtre los datos relevantes (ej., humedad < 20%), y env\u00ede notificaciones push a una aplicaci\u00f3n m\u00f3vil para los agricultores. Debe ser capaz de escalar para manejar un n\u00famero creciente de sensores.\n*   **Sugerencias:** Reactor, RxJava, Spring WebFlux, Kafka, MQTT.\n\n", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 1, "respuestaAlumno": "", "archivoSubido": false, "respuestaProfesor": "## Soluci\u00f3n para el Sistema de Monitorizaci\u00f3n de Sensores IoT\n\nPara el escenario de la empresa de agricultura inteligente, se propone una arquitectura reactiva basada en Spring WebFlux, Kafka y MQTT.\n\n**1. Ingesta de Datos:** Los sensores IoT publicar\u00e1n datos de telemetr\u00eda (humedad, temperatura, luz solar) a un broker MQTT.  MQTT es ideal para entornos con recursos limitados y redes inestables.\n\n**2. Procesamiento de Datos en Tiempo Real:** Un servicio Spring WebFlux se suscribir\u00e1 a los topics MQTT relevantes.  Spring WebFlux, basado en Reactor, permite un procesamiento as\u00edncrono y no bloqueante de los flujos de datos.  Este servicio filtrar\u00e1 los datos seg\u00fan las reglas definidas (ej., humedad < 20%). Los datos filtrados se enviar\u00e1n a un topic Kafka para su posterior procesamiento y persistencia.\n\n**3. Notificaciones Push:** Otro servicio Spring WebFlux consumir\u00e1 los datos del topic Kafka. Este servicio se encargar\u00e1 de generar notificaciones push a la aplicaci\u00f3n m\u00f3vil de los agricultores utilizando un servicio de notificaciones push (ej., Firebase Cloud Messaging). Las notificaciones incluir\u00e1n informaci\u00f3n relevante sobre la condici\u00f3n cr\u00edtica detectada (ej., \"Humedad cr\u00edticamente baja en el sector X\").\n\n**4. Escalabilidad y Resiliencia:** Kafka proporciona escalabilidad horizontal para manejar el creciente n\u00famero de sensores. La arquitectura reactiva de Spring WebFlux, con su naturaleza no bloqueante, permite un uso eficiente de los recursos del servidor, mejorando la capacidad de respuesta del sistema bajo carga.  Adem\u00e1s, la replicaci\u00f3n de datos en Kafka garantiza la resiliencia del sistema.\n\n**5.  Persistencia de Datos:**  Opcionalmente, se puede utilizar una base de datos NoSQL como Cassandra para almacenar los datos hist\u00f3ricos de los sensores para an\u00e1lisis posteriores y generaci\u00f3n de informes.  Kafka Connect puede facilitar la integraci\u00f3n con Cassandra.\n\n\n**Tecnolog\u00edas Clave:**\n\n* **MQTT:** Protocolo ligero para comunicaci\u00f3n m\u00e1quina a m\u00e1quina.\n* **Spring WebFlux:** Framework reactivo para construir aplicaciones web no bloqueantes.\n* **Kafka:** Plataforma de streaming distribuida para procesamiento de datos en tiempo real.\n* **Cassandra (Opcional):** Base de datos NoSQL para almacenamiento de datos hist\u00f3ricos.\n* **Firebase Cloud Messaging (o similar):** Servicio para env\u00edo de notificaciones push.\n\n\nEsta arquitectura reactiva proporciona un sistema escalable, resiliente y eficiente para monitorizar los sensores IoT y alertar a los agricultores sobre condiciones cr\u00edticas en tiempo real.\n"}]}, "createdAt": "2025-06-16T12:33:35.530578", "expiration": "2025-06-23T17:33:35.511Z", "publicAccess": true}
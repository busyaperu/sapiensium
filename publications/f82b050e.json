{"id": "f82b050e", "examenData": {"examen_id": "764063", "nombre_examen": "Arquitecturas Reactivas", "tipo_examen": "Evaluaci\u00f3n", "fecha": "2025-05-19T14:19:50.045Z", "nombre_profesor": "Mariela Isabel Camargo Roman", "profesor_id": "16MI765", "preguntas_marcar": [{"numero": 1, "texto": "En el contexto de las Arquitecturas Reactivas, \u00bfqu\u00e9 significa que un sistema sea Resiliente?\nA) Que puede escalar horizontalmente para manejar m\u00e1s carga.\nB) Que se mantiene responsivo ante fallos.\nC) Que procesa todas las solicitudes de forma secuencial.\nD) Que utiliza un patr\u00f3n de solicitud/respuesta s\u00edncrono.\nE) Que ignora los errores y contin\u00faa procesando.", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 2, "texto": "\u00bfQu\u00e9 patr\u00f3n se utiliza com\u00fanmente en sistemas reactivos para manejar la sobrecarga de datos de un emisor a un receptor (Backpressure)?\nA) Patr\u00f3n de Polling constante.\nB) Limitaci\u00f3n de la velocidad de emisi\u00f3n por parte del receptor.\nC) Ignorar los datos adicionales.\nD) Almacenar todos los datos entrantes en memoria ilimitada.\nE) Bloquear al emisor hasta que el receptor est\u00e9 listo.", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 3, "texto": "\u00bfQu\u00e9 caracter\u00edstica describe a un sistema reactivo como El\u00e1stico?\nA) Que utiliza un conjunto fijo de recursos de hardware.\nB) Que puede adaptarse a cargas de trabajo variables.\nC) Que requiere aprovisionamiento manual de recursos.\nD) Que es dif\u00edcil de escalar m\u00e1s all\u00e1 de una sola m\u00e1quina.\nE) Que solo puede crecer, no reducir su uso de recursos.", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 4, "texto": "\u00bfCu\u00e1l es una caracter\u00edstica clave de una implementaci\u00f3n de Reactive Streams?\nA) Permite el paso de datos s\u00edncrono y bloqueante.\nB) Gestiona la contrapresi\u00f3n de forma no bloqueante.\nC) Se basa exclusivamente en el patr\u00f3n pull (el receptor pide datos).\nD) Se basa exclusivamente en el patr\u00f3n push (el emisor env\u00eda datos).\nE) Requiere compartir estado mutable entre el emisor y el receptor.", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 5, "texto": "\u00bfCu\u00e1l de las siguientes tecnolog\u00edas o especificaciones est\u00e1 directamente relacionada con la implementaci\u00f3n de principios reactivos?\nA) Transacciones ACID de bases de datos relacionales.\nB) Llamadas a procedimientos remotos (RPC) s\u00edncronas.\nC) Especificaci\u00f3n Reactive Streams.\nD) Arquitecturas de Microservicios monol\u00edticos.\nE) Protocolo FTP para transferencia de archivos.", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 6, "texto": "\u00bfQu\u00e9 principio de las arquitecturas reactivas se enfoca en que el sistema permanezca responsivo incluso cuando falla alguno de sus componentes?\nA) Elasticity\nB) Responsiveness\nC) Resilience\nD) Scalability\nE) Availability", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 7, "texto": "La capacidad de un sistema reactivo para mantenerse responsivo bajo cargas de trabajo variables se relaciona directamente con el principio de:\nA) Resilience\nB) Message Driven\nC) Responsiveness\nD) Scalability\nE) Elasticity", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 8, "texto": "En una arquitectura reactiva, el principio \"Message Driven\" implica principalmente:\nA) Uso exclusivo de protocolos s\u00edncronos.\nB) Comunicaci\u00f3n entre componentes a trav\u00e9s de mensajes as\u00edncronos y no bloqueantes.\nC) Dependencia directa y fuerte entre los servicios.\nD) Ejecuci\u00f3n de todas las operaciones de forma bloqueante.\nE) Uso de bases de datos relacionales \u00fanicamente.", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 9, "texto": "\u00bfCu\u00e1l es una diferencia clave entre la Programaci\u00f3n Reactiva y las Arquitecturas Reactivas (Sistemas Reactivos)?\nA) La Programaci\u00f3n Reactiva se enfoca en la composici\u00f3n de flujos de datos as\u00edncronos, mientras que las Arquitecturas Reactivas se centran en las propiedades de sistemas distribuidos.\nB) La Programaci\u00f3n Reactiva es un subconjunto de las Arquitecturas Reactivas.\nC) Son t\u00e9rminos sin\u00f3nimos que describen lo mismo.\nD) Las Arquitecturas Reactivas solo aplican a sistemas monol\u00edticos.\nE) La Programaci\u00f3n Reactiva siempre requiere el uso de actores.", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 10, "texto": "\u00bfQu\u00e9 patr\u00f3n de dise\u00f1o es com\u00fanmente utilizado en arquitecturas reactivas para desacoplar servicios y facilitar la comunicaci\u00f3n as\u00edncrona?\nA) Monolito\nB) Service Locator\nC) Message Broker (Agente de Mensajes)\nD) Direct Procedure Call\nE) Shared Database", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}], "preguntas_libres": [{"numero": 11, "texto": "Describe c\u00f3mo se logra la resiliencia y la elasticidad en una arquitectura reactiva, proporcionando ejemplos concretos de patrones de dise\u00f1o o tecnolog\u00edas que soportan estos principios.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 12, "texto": "Compara y contrasta las estrategias de manejo de la contrapresi\u00f3n (backpressure) en sistemas basados en flujos reactivos (reactive streams) frente a enfoques m\u00e1s tradicionales de manejo de carga.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 13, "texto": "Analiza los desaf\u00edos inherentes a la depuraci\u00f3n y monitorizaci\u00f3n de sistemas distribuidos construidos sobre principios reactivos y propone posibles soluciones o herramientas para abordarlos.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 14, "texto": "Discute el papel de la comunicaci\u00f3n as\u00edncrona y los modelos de actores o basados en mensajes en la habilitaci\u00f3n de la escalabilidad y la capacidad de respuesta en arquitecturas reactivas.", "puntaje": 1, "respuestaAlumno": ""}], "casos_uso": [{"numero": 15, "descripcion": "**Escenario:** Una plataforma de comercio electr\u00f3nico necesita gestionar un gran volumen de pedidos concurrentes y actualizar el inventario en tiempo real, garantizando la consistencia de los datos y evitando la sobreventa.\n\n**Requisitos:**  Desarrollar un sistema reactivo que procese las solicitudes de compra de forma as\u00edncrona, gestione el inventario de forma concurrente y notifique al usuario sobre el estado del pedido en tiempo real.  El sistema debe ser resiliente a picos de tr\u00e1fico.\n\n**Sugerencias:** Vert.x, Spring WebFlux, Redis.", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 1, "respuestaAlumno": "", "archivoSubido": false}, {"numero": 16, "descripcion": "**Escenario:** Una aplicaci\u00f3n de chat en tiempo real necesita distribuir mensajes instant\u00e1neamente a m\u00faltiples usuarios conectados, mostrando las actualizaciones en la interfaz de usuario sin necesidad de refrescar la p\u00e1gina.\n\n**Requisitos:**  Crear una aplicaci\u00f3n reactiva que utilice WebSockets para la comunicaci\u00f3n bidireccional entre el cliente y el servidor,  gestione la presencia de usuarios y permita el env\u00edo de mensajes a grupos. El sistema debe ser escalable para un gran n\u00famero de usuarios concurrentes.\n\n**Sugerencias:**  Ratpack, Socket.IO, Spring WebFlux.", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 1, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-05-19T09:19:50.107256", "expiration": "2025-05-26T14:19:50.045Z", "publicAccess": true}
{"id": "aebcfaa7", "examenData": {"examen_id": "623042", "nombre_examen": "Programaci\u00f3n UML", "tipo_examen": "Evaluaci\u00f3n", "fecha": "2025-04-28T19:48:35.598Z", "nombre_profesor": "Mariela Isabel Camargo Rom\u00e1n", "profesor_id": "16MI987", "preguntas_marcar": [{"numero": 1, "texto": "\u00bfCu\u00e1l de los siguientes principios es clave en las arquitecturas reactivas?  \nA) Acoplamiento fuerte entre componentes  \nB) Resistencia ante fallos (resiliencia)  \nC) Dependencia de procesos en lote  \nD) Sincronizaci\u00f3n obligatoria de todas las operaciones  \nE) Centralizaci\u00f3n del estado del sistema", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 2, "texto": "\u00bfQu\u00e9 patr\u00f3n de dise\u00f1o es com\u00fan en sistemas reactivos para manejar flujos de datos?  \nA) Singleton  \nB) Observer  \nC) Factory  \nD) Decorator  \nE) Adapter", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 3, "texto": "\u00bfQu\u00e9 tecnolog\u00eda NO se asocia t\u00edpicamente con arquitecturas reactivas?  \nA) Akka  \nB) Reactor  \nC) Spring MVC  \nD) RxJava  \nE) Vert.x", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 4, "texto": "\u00bfQu\u00e9 ventaja ofrece el principio de elasticidad en sistemas reactivos?  \nA) Capacidad de escalar seg\u00fan la demanda  \nB) Mayor seguridad en las transacciones  \nC) Reducci\u00f3n del uso de memoria  \nD) Simplificaci\u00f3n del c\u00f3digo fuente  \nE) Compatibilidad con lenguajes obsoletos", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 5, "texto": "\u00bfQu\u00e9 tipo de comunicaci\u00f3n entre servicios es caracter\u00edstica de sistemas reactivos?  \nA) S\u00edncrona punto a punto  \nB) As\u00edncrona no bloqueante  \nC) Directa mediante llamadas HTTP sincr\u00f3nicas  \nD) Basada en archivos compartidos  \nE) Por procedimientos remotos (RPC)", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}], "preguntas_libres": [{"numero": 6, "texto": "**Intermedio:** Compara el Modelo de Actores con el uso de streams reactivos (como RxJava o Project Reactor) en una Arquitectura Reactiva, destacando ventajas, desventajas y casos de uso ideales para cada enfoque.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 7, "texto": "**Avanzado:** Analiza c\u00f3mo el patr\u00f3n CQRS (Command Query Responsibility Segregation) puede integrarse en una Arquitectura Reactiva, describiendo los desaf\u00edos t\u00e9cnicos y los beneficios para sistemas con alta concurrencia.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 8, "texto": "**Intermedio:** Explica c\u00f3mo garantizar la consistencia eventual en un sistema basado en una Arquitectura Reactiva que utiliza event sourcing, incluyendo estrategias para manejar fallos y recuperaci\u00f3n de estados.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 9, "texto": "**Avanzado:** Dise\u00f1a una estrategia para implementar backpressure en un sistema reactivo que procesa flujos de datos en tiempo real, considerando tecnolog\u00edas como Akka Streams o Reactor, y detalla c\u00f3mo manejar\u00edas picos de carga inesperados.", "puntaje": 1, "respuestaAlumno": ""}], "casos_uso": [{"numero": 10, "descripcion": "**N\u00famero de caso:** 2  \n   **Escenario pr\u00e1ctico:** Una plataforma de streaming de video necesita transmitir contenido a millones de usuarios simult\u00e1neamente, adaptando la calidad del video seg\u00fan el ancho de banda del cliente.  \n   **Requisitos espec\u00edficos:** Implementar un sistema reactivo que gestione conexiones en tiempo real, balancee la carga y ajuste din\u00e1micamente la resoluci\u00f3n del video.  \n   **Sugerencias de herramientas:** Reactor Project, WebFlux, RSocket, y protocolos como HLS o DASH.", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 1, "respuestaAlumno": "", "archivoSubido": false}, {"numero": 11, "descripcion": "**N\u00famero de caso:** 3  \n   **Escenario pr\u00e1ctico:** Un sistema de monitoreo de IoT para f\u00e1bricas debe procesar flujos de datos de sensores (temperatura, vibraci\u00f3n) y generar alertas ante anomal\u00edas.  \n   **Requisitos espec\u00edficos:** Crear una arquitectura que procese eventos en tiempo real, aplique reglas de negocio para alertas y almacene datos hist\u00f3ricos eficientemente.  \n   **Sugerencias de herramientas:** Apache Flink, MQTT, InfluxDB, y patrones como Complex Event Processing (CEP).", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 1, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-04-28T14:48:35.629814", "expiration": "2025-05-05T19:48:35.598Z", "publicAccess": true}
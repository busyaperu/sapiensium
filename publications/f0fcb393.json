{"id": "f0fcb393", "examenData": {"examen_id": "454498", "nombre_examen": "Programaci\u00f3n UML", "tipo_examen": "Evaluaci\u00f3n", "fecha": "2025-04-25T17:37:57.302Z", "nombre_profesor": "Mariela Isabel Camargo Rom\u00e1n", "profesor_id": "16MI987", "preguntas_marcar": [{"numero": 1, "texto": "\u00bfCu\u00e1l de los siguientes es un principio clave de las arquitecturas reactivas seg\u00fan el Manifiesto Reactivo?  \nA) Tolerancia al fracaso  \nB) Latencia predecible  \nC) Procesamiento por lotes  \nD) Sincronizaci\u00f3n r\u00edgida  \nE) Jerarqu\u00eda fija de componentes", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 2, "texto": "\u00bfQu\u00e9 patr\u00f3n de dise\u00f1o es com\u00fan en sistemas reactivos para manejar flujos de datos as\u00edncronos?  \nA) Singleton  \nB) Observer  \nC) Factory  \nD) Decorator  \nE) Proxy", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 3, "texto": "\u00bfQu\u00e9 tecnolog\u00eda se asocia frecuentemente con la implementaci\u00f3n de sistemas reactivos?  \nA) React.js  \nB) Apache Kafka  \nC) MySQL  \nD) Spring MVC  \nE) Hibernate", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 4, "texto": "En una arquitectura reactiva, \u00bfqu\u00e9 significa \"Elasticidad\"?  \nA) Capacidad de manejar fallos sin detenerse  \nB) Escalar recursos seg\u00fan la demanda  \nC) Procesamiento secuencial de tareas  \nD) Uso de cach\u00e9 est\u00e1tico  \nE) Dependencia de un \u00fanico nodo", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 5, "texto": "\u00bfCu\u00e1l de estos lenguajes es com\u00fanmente utilizado para desarrollar sistemas reactivos?  \nA) Python  \nB) Java  \nC) C++  \nD) Ruby  \nE) PHP", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}], "preguntas_libres": [{"numero": 6, "texto": "**Intermedio**: Analiza c\u00f3mo el patr\u00f3n *Event Sourcing* se integra dentro de una Arquitectura Reactiva. Proporciona un ejemplo concreto donde este patr\u00f3n mejore la escalabilidad y resiliencia del sistema.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 7, "texto": "**Intermedio-Avanzado**: Describe c\u00f3mo se implementar\u00eda el *Backpressure* en un sistema reactivo para manejar flujos de datos as\u00edncronos. Incluye un ejemplo de framework o librer\u00eda que permita este manejo y explica su funcionamiento.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 7, "texto": "**Avanzado**: Compara el modelo de hilos tradicional (thread-per-request) con el modelo de *multi-reactor* usado en sistemas reactivos. \u00bfQu\u00e9 ventajas y desaf\u00edos presenta este \u00faltimo en entornos de alta concurrencia?", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 9, "texto": "**Avanzado**: Imagina un sistema de comercio electr\u00f3nico que debe manejar picos masivos de tr\u00e1fico durante eventos como el Black Friday. Dise\u00f1a una arquitectura reactiva detallada, especificando los componentes clave (ej: API Reactiva, colas de mensajer\u00eda, bases de datos) y c\u00f3mo interact\u00faan para garantizar responsividad y tolerancia a fallos.", "puntaje": 1, "respuestaAlumno": ""}], "casos_uso": [{"numero": 10, "descripcion": "1. **Escenario**: Sistema de reservas en tiempo real para un cine  \n   - **Preguntas de caso de uso**:  \n     1. \u00bfC\u00f3mo manejar picos de demanda cuando se estrena una pel\u00edcula popular sin colapsar el sistema?  \n     2. \u00bfC\u00f3mo garantizar que las reservas sean consistentes y no haya sobreventa de asientos?  \n   - **Requisitos**:  \n     - Implementar backpressure para gestionar picos de demanda.  \n     - Usar patrones como Event Sourcing para garantizar consistencia en las reservas.  \n   - **Herramientas sugeridas**:  \n     - Kafka para manejo de eventos, Akka Streams para backpressure, Cassandra para almacenamiento.  \n\n", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 1, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-04-25T12:37:57.330110", "expiration": "2025-05-02T17:37:57.302Z", "publicAccess": true}
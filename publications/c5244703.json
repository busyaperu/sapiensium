{"id": "c5244703", "examenData": {"examen_id": "287080", "nombre_examen": "Programaci\u00f3n UML", "tipo_examen": "Evaluaci\u00f3n", "fecha": "2025-04-28T18:04:22.253Z", "nombre_profesor": "Mariela Isabel Camargo Rom\u00e1n", "profesor_id": "16MI987", "preguntas_marcar": [{"numero": 1, "texto": "\u00bfCu\u00e1l de los siguientes es un principio fundamental del Manifiesto Reactivo?  \nA) Tolerancia al fallo  \nB) Resistencia al cambio  \nC) Acoplamiento r\u00edgido  \nD) Jerarqu\u00eda estricta de componentes  \nE) Procesamiento por lotes", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 2, "texto": "\u00bfQu\u00e9 patr\u00f3n de dise\u00f1o es com\u00fan en arquitecturas reactivas para manejar flujos de datos?  \nA) Singleton  \nB) Observer  \nC) Decorator  \nD) Factory  \nE) Proxy", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 3, "texto": "\u00bfQu\u00e9 tecnolog\u00eda se usa frecuentemente para implementar sistemas reactivos?  \nA) JDBC  \nB) Reactor  \nC) Hibernate  \nD) JSP  \nE) Servlets", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 4, "texto": "\u00bfQu\u00e9 beneficio ofrece el modelo de mensajer\u00eda as\u00edncrona en sistemas reactivos?  \nA) Mayor acoplamiento entre servicios  \nB) Menor escalabilidad  \nC) Mejor tolerancia a fallos  \nD) Dependencia de tiempos de respuesta fijos  \nE) Mayor complejidad en el debugging", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 5, "texto": "\u00bfQu\u00e9 componente en una arquitectura reactiva se encarga de manejar errores sin detener el sistema?  \nA) Circuit Breaker  \nB) Load Balancer  \nC) Cache Manager  \nD) API Gateway  \nE) Firewall", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}], "preguntas_libres": [{"numero": 6, "texto": "**Intermedio:** Compara y contrasta las diferencias clave entre una arquitectura reactiva tradicional (basada en callbacks) y una que utiliza programaci\u00f3n reactiva con streams (como RxJS o Project Reactor).", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 7, "texto": "**Intermedio-Avanzado:** Describe c\u00f3mo el patr\u00f3n \"Event Sourcing\" se integra con una arquitectura reactiva, incluyendo sus beneficios y posibles desaf\u00edos de implementaci\u00f3n.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 8, "texto": "**Avanzado:** Analiza c\u00f3mo se maneja el backpressure en sistemas reactivos y qu\u00e9 estrategias pueden emplearse para optimizar el flujo de datos en escenarios de alta carga.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 9, "texto": "**Avanzado:** Explica c\u00f3mo garantizar la consistencia de datos en un sistema distribuido basado en arquitectura reactiva, considerando posibles fallos en la red y latencia entre servicios.", "puntaje": 1, "respuestaAlumno": ""}], "casos_uso": [{"numero": 10, "descripcion": "**Caso 1**  \n- **Escenario**: Un sistema de comercio electr\u00f3nico necesita manejar picos de tr\u00e1fico durante eventos como el Black Friday. Debes dise\u00f1ar una arquitectura reactiva que garantice escalabilidad y resiliencia, procesando \u00f3rdenes en tiempo real sin p\u00e9rdida de datos.  \n- **Requisitos**: Implementar un sistema basado en mensajer\u00eda as\u00edncrona para procesar \u00f3rdenes, con capacidad de recuperaci\u00f3n ante fallos y balanceo de carga.  \n- **Herramientas sugeridas**: Kafka, Akka, Spring WebFlux, Cassandra.  \n\n", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 1, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-04-28T13:04:22.274214", "expiration": "2025-05-05T18:04:22.253Z", "publicAccess": true}
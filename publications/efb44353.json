{"id": "efb44353", "examenData": {"id": "423431", "fecha": "2025-04-08", "profesor": "Mariela Isabel Camargo Roman", "nombreAlumno": "", "idAlumno": "", "bloqueado": true, "preguntasMarcar": [{"numero": 1, "texto": "1-1) \u00bfCu\u00e1l de los siguientes es un principio fundamental de las arquitecturas reactivas?", "puntaje": 1, "opciones": [{"texto": "A) Acoplamiento fuerte entre componentes", "valor": "A"}, {"texto": "B) Tolerancia a fallos mediante aislamiento", "valor": "B"}, {"texto": "C) Procesamiento por lotes (batch)", "valor": "C"}, {"texto": "D) Sincronizaci\u00f3n estricta de procesos", "valor": "D"}, {"texto": "E) Centralizaci\u00f3n del estado de la aplicaci\u00f3n", "valor": "E"}], "respuestaSeleccionada": null}], "preguntasLibres": [{"numero": 1, "texto": "1-1. Compara y contrasta las arquitecturas en capas y hexagonal en t\u00e9rminos de acoplamiento, cohesi\u00f3n y flexibilidad. Explica con ejemplos concretos c\u00f3mo cada enfoque maneja estos aspectos y en qu\u00e9 escenarios ser\u00eda m\u00e1s recomendable utilizar una u otra arquitectura.", "puntaje": 1, "respuestaAlumno": ""}], "casosUso": [{"numero": 1, "descripcion": "**Caso 1-1:**  \n\n**Escenario pr\u00e1ctico:**  \nUna plataforma de comercio electr\u00f3nico necesita manejar picos de tr\u00e1fico durante eventos como el Black Friday, garantizando alta disponibilidad y respuestas en tiempo real para actualizaciones de inventario y procesamiento de pedidos.  \n\n**Preguntas de caso de uso:**\n\n1. \u00bfC\u00f3mo dise\u00f1ar\u00edas un sistema reactivo para escalar autom\u00e1ticamente los microservicios de inventario y pedidos bajo alta demanda, evitando cuellos de botella?  \n2. \u00bfQu\u00e9 patrones reactivos (ej. Circuit Breaker, Event Sourcing) aplicar\u00edas para garantizar consistencia en los datos de inventario durante transacciones concurrentes?  \n\n**Requisitos espec\u00edficos:**  \n- Implementar un sistema basado en mensajer\u00eda as\u00edncrona para comunicar servicios.  \n- Garantizar tolerancia a fallos y resiliencia en transacciones distribuidas.  \n- Demostrar escalabilidad horizontal autom\u00e1tica bajo carga.  \n\n**Sugerencias de herramientas/enfoques:**  \n- Herramientas: Kafka, Akka, Spring WebFlux, Kubernetes (HPA).  \n- Enfoques: Patr\u00f3n CQRS, backpressure, replicaci\u00f3n eventual.", "pregunta": "Pregunta sobre el caso de uso", "puntaje": 1, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-04-08T16:44:28.338095", "expiration": "2025-04-15T21:44:28.295Z", "publicAccess": true}
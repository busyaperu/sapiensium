{"id": "3c6fad30", "examenData": {"email": "smartlabelperu@gmail.com", "examen_id": "068816", "nombre_examen": "Patrones de dise\u00f1o ", "tipo_examen": "Evaluaci\u00f3n", "fecha": "2025-06-25T15:25:41.943Z", "nombre_profesor": "Mariela Isabel Camargo Rom\u00e1n", "profesor_id": "16MI765", "preguntas_marcar": [{"numero": 1, "texto": "\u00bfEn qu\u00e9 situaci\u00f3n es \u00fatil aplicar el patr\u00f3n Factory Method?", "puntaje": 0.5, "opciones": [{"texto": "Cuando se requiere un \u00fanico punto de acceso a un objeto", "valor": "A"}, {"texto": "Al necesitar crear objetos sin especificar su clase concreta", "valor": "B"}, {"texto": "Para sincronizar cambios entre un sujeto y m\u00faltiples observadores", "valor": "C"}, {"texto": "Cuando se desea encapsular una solicitud como un objeto", "valor": "D"}, {"texto": "Para almacenar y recuperar objetos en un buffer de memoria", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 2, "texto": "\u00bfQu\u00e9 describe correctamente el patr\u00f3n Observer?", "puntaje": 0.5, "opciones": [{"texto": "Un observador mantiene una referencia directa a m\u00faltiples sujetos", "valor": "A"}, {"texto": "El sujeto env\u00eda notificaciones a sus observadores mediante eventos", "valor": "B"}, {"texto": "Se utiliza exclusivamente para la gesti\u00f3n de hilos en aplicaciones multithread", "valor": "C"}, {"texto": "Elimina la necesidad de herencia mediante la composici\u00f3n de objetos", "valor": "D"}, {"texto": "Es una soluci\u00f3n para evitar la dependencia c\u00edclica entre componentes", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 3, "texto": "\u00bfCu\u00e1l de estos patrones se clasifica como comportamiento (behavioral)?", "puntaje": 0.5, "opciones": [{"texto": "Adapter", "valor": "A"}, {"texto": "Proxy", "valor": "B"}, {"texto": "Strategy", "valor": "C"}, {"texto": "Builder", "valor": "D"}, {"texto": "Composite", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 4, "texto": "\u00bfQu\u00e9 patr\u00f3n permite que un objeto se adapte a una interfaz incompatible?", "puntaje": 1, "opciones": [{"texto": "Singleton", "valor": "A"}, {"texto": "Adapter", "valor": "B"}, {"texto": "Decorator", "valor": "C"}, {"texto": "Factory", "valor": "D"}, {"texto": "Command", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 5, "texto": "\u00bfCu\u00e1l es la caracter\u00edstica distintiva del patr\u00f3n Strategy?", "puntaje": 0.5, "opciones": [{"texto": "Define una familia de algoritmos y los encapsula para intercambiarlos", "valor": "A"}, {"texto": "Proporciona una representaci\u00f3n simplificada de objetos complejos", "valor": "B"}, {"texto": "Restringe la creaci\u00f3n de objetos a un rango predefinido", "valor": "C"}, {"texto": "Separa la representaci\u00f3n de un objeto de su interfaz p\u00fablica", "valor": "D"}, {"texto": "Implementa l\u00f3gica de inicializaci\u00f3n mediante una plantilla", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 6, "texto": "\u00bfPara qu\u00e9 se utiliza el patr\u00f3n Builder?", "puntaje": 0.5, "opciones": [{"texto": "Para crear objetos paso a paso con diferentes representaciones", "valor": "A"}, {"texto": "Garantizar la inmutabilidad de objetos despu\u00e9s de su creaci\u00f3n", "valor": "B"}, {"texto": "Permitir la comunicaci\u00f3n entre componentes sin acoplamiento fuerte", "valor": "C"}, {"texto": "Mantener un historial de estados de un objeto", "valor": "D"}, {"texto": "Simplificar la jerarqu\u00eda de objetos mediante composici\u00f3n", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 7, "texto": "\u00bfCu\u00e1l de estos patrones implica un \"cliente\" que solicita un objeto mediante una interfaz?", "puntaje": 0.5, "opciones": [{"texto": "Abstract Factory", "valor": "A"}, {"texto": "Proxy", "valor": "B"}, {"texto": "Flyweight", "valor": "C"}, {"texto": "Facade", "valor": "D"}, {"texto": "Chain of Responsibility", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 8, "texto": "\u00bfQu\u00e9 patr\u00f3n se enfoca en agregar responsabilidades a un objeto de manera din\u00e1mica?", "puntaje": 0.5, "opciones": [{"texto": "Decorator", "valor": "A"}, {"texto": "Composite", "valor": "B"}, {"texto": "Template Method", "valor": "C"}, {"texto": "State", "valor": "D"}, {"texto": "Command", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 9, "texto": "\u00bfCu\u00e1l es el prop\u00f3sito del patr\u00f3n Template Method?", "puntaje": 0.5, "opciones": [{"texto": "Proporcionar una interfaz com\u00fan para objetos con funcionalidades similares", "valor": "A"}, {"texto": "Define el esqueleto de un algoritmo en una clase base", "valor": "B"}, {"texto": "Separar el objeto que genera una solicitud de su objeto que la ejecuta", "valor": "C"}, {"texto": "Permitir la creaci\u00f3n de copias de objetos sin acoplamiento a su clase", "valor": "D"}, {"texto": "Establecer una relaci\u00f3n de uno a muchos entre objetos colaboradores", "valor": "E"}], "respuestaSeleccionada": null}], "preguntas_libres": [{"numero": 10, "texto": "Explique c\u00f3mo el patr\u00f3n Factory Method promueve el principio de inversi\u00f3n de dependencias (DIP) y c\u00f3mo se diferencia del patr\u00f3n Abstract Factory en t\u00e9rminos de su prop\u00f3sito y estructura.", "puntaje": 1.5, "respuestaAlumno": ""}, {"numero": 11, "texto": "Describa un escenario del mundo real donde el patr\u00f3n Observer ser\u00eda la soluci\u00f3n de dise\u00f1o m\u00e1s adecuada.  Explique c\u00f3mo implementar\u00eda este patr\u00f3n, incluyendo las consideraciones de rendimiento y acoplamiento.", "puntaje": 1.5, "respuestaAlumno": ""}, {"numero": 12, "texto": "Compare y contraste los patrones Decorator y Proxy, destacando sus similitudes y diferencias en cuanto a su intenci\u00f3n y aplicaci\u00f3n.  Proporcione ejemplos concretos para ilustrar sus puntos.", "puntaje": 1.5, "respuestaAlumno": ""}, {"numero": 13, "texto": "Imagine que est\u00e1 dise\u00f1ando un sistema complejo con m\u00faltiples m\u00f3dulos interdependientes. \u00bfC\u00f3mo utilizar\u00eda una combinaci\u00f3n de patrones de dise\u00f1o (al menos tres patrones diferentes) para lograr una arquitectura flexible, mantenible y escalable?  Justifique sus elecciones y explique c\u00f3mo interact\u00faan los patrones.", "puntaje": 1.5, "respuestaAlumno": ""}], "casos_uso": [{"numero": 14, "descripcion": "- **Escenario**: Una aplicaci\u00f3n de gesti\u00f3n de configuraci\u00f3n global para un juego necesita asegurar que solo exista una instancia de la clase `GameConfig`.  \n- **Requisitos**: Implementa el patr\u00f3n Singleton para garantizar que todas las partes del juego accedan a la misma instancia de configuraci\u00f3n.  \n- **Herramientas**: Usa Java o C# con modificadores de acceso (`private`, `static`) y un m\u00e9todo `getInstance()`.  \n\n", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 4, "respuestaAlumno": "", "archivoSubido": false}, {"numero": 15, "descripcion": "**Caso: Gesti\u00f3n de Conexiones a Base de Datos**  \n   - **Escenario**: Un sistema de facturaci\u00f3n debe conectarse a m\u00faltiples bases de datos (MySQL, PostgreSQL, MongoDB) dependiendo del tipo de cliente. La l\u00f3gica de creaci\u00f3n de conexiones debe ser encapsulada para evitar duplicaciones y mantener un c\u00f3digo limpio.  \n   - **Requisitos**: Aplicar el patr\u00f3n Factory para crear una clase `DatabaseFactory` que genere objetos de conexi\u00f3n (`MySQLConnection`, `PostgreSQLConnection`, `MongoDBConnection`) implementando una interfaz com\u00fan `DatabaseConnection`. La f\u00e1brica debe elegir la conexi\u00f3n seg\u00fan un par\u00e1metro de entrada.  \n   - **Herramientas/Sugerencias**: Utilizar Python con `abc` para definir interfaces abstractas, o Java con `abstract class` y m\u00e9todos est\u00e1ticos de f\u00e1brica.", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 5, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-06-25T10:25:41.965099", "expiration": "2025-07-02T15:25:41.943Z", "publicAccess": true}
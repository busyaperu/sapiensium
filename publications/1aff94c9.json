{"id": "1aff94c9", "examenData": {"id": "684636", "fecha": "2025-04-16", "profesor": "Mariela Isabel Camargo Roman", "nombreAlumno": "", "idAlumno": "", "bloqueado": true, "preguntasMarcar": [{"numero": 1, "texto": "1-1) \u00bfCu\u00e1l de los siguientes es un principio fundamental de las arquitecturas reactivas?", "puntaje": 1, "opciones": [{"texto": "A) Acoplamiento fuerte entre componentes", "valor": "A"}, {"texto": "B) Tolerancia a fallos mediante bloqueos", "valor": "B"}, {"texto": "C) Orientaci\u00f3n a mensajes as\u00edncronos", "valor": "C"}, {"texto": "D) Centralizaci\u00f3n del estado de la aplicaci\u00f3n", "valor": "D"}, {"texto": "E) Dependencia de infraestructura monol\u00edtica", "valor": "E"}], "respuestaSeleccionada": null}], "preguntasLibres": [{"numero": 1, "texto": "1-1. Compara detalladamente las ventajas y desventajas de la arquitectura en capas frente a la arquitectura hexagonal, considerando aspectos como acoplamiento, mantenibilidad, escalabilidad y adaptabilidad a cambios. Proporciona ejemplos concretos en los que una arquitectura ser\u00eda m\u00e1s adecuada que la otra. (Nivel: intermedio)", "puntaje": 1, "respuestaAlumno": ""}], "casosUso": [{"numero": 1, "descripcion": "**Caso 1-1**  \n\n**Escenario pr\u00e1ctico:**  \nUna plataforma de comercio electr\u00f3nico necesita manejar picos de tr\u00e1fico durante eventos como el Black Friday, garantizando baja latencia y alta disponibilidad. Debes dise\u00f1ar una arquitectura reactiva que procese \u00f3rdenes de compra y notificaciones en tiempo real.  \n\n**Preguntas de casos de uso:**  \n1. \u00bfC\u00f3mo garantizar\u00edas el procesamiento as\u00edncrono y sin bloqueo de las \u00f3rdenes de compra durante picos de demanda?  \n2. \u00bfQu\u00e9 estrategias implementar\u00edas para manejar fallos y garantizar la consistencia de datos entre microservicios?  \n\n**Requisitos espec\u00edficos:**  \n- Implementar un sistema basado en mensajer\u00eda (ej. colas de eventos).  \n- Usar patrones como Circuit Breaker y Saga para manejo de fallos.  \n- Garantizar escalabilidad horizontal y resiliencia.  \n\n**Sugerencias de herramientas/enfoques:**  \n- Herramientas: Kafka, RabbitMQ, Spring WebFlux, Akka, Kubernetes.  \n- Enfoques: Event Sourcing, CQRS, replicaci\u00f3n de datos eventualmente consistente.", "pregunta": "Pregunta sobre el caso de uso", "puntaje": 1, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-04-16T12:39:57.688452", "expiration": "2025-04-23T17:39:57.669Z", "publicAccess": true}
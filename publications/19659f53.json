{"id": "19659f53", "examenData": {"examen_id": "278546", "nombre_examen": "Arquitecturas Reactivas", "tipo_examen": "Evaluaci\u00f3n", "fecha": "2025-05-31T22:16:36.476Z", "nombre_profesor": "Mariela Isabel Camargo Rom\u00e1n", "profesor_id": "16MI987", "preguntas_marcar": [{"numero": 1, "texto": "\u00bfQu\u00e9 patr\u00f3n de dise\u00f1o es fundamental para la gesti\u00f3n de errores en un sistema reactivo?\nA) Singleton\nB) Factory\nC) Circuit Breaker\nD) Observer\nE) Strategy", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 2, "texto": "\u00bfCu\u00e1l tecnolog\u00eda es ampliamente utilizada para implementar flujos de datos reactivos?\nA) JDBC\nB)  Spring MVC\nC)  Reactive Streams\nD)  Hibernate\nE)  JSP", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 3, "texto": "\u00bfQu\u00e9 caracter\u00edstica describe mejor la elasticidad en una arquitectura reactiva?\nA) Capacidad de manejar picos de carga\nB)  Alta disponibilidad\nC)  Tolerancia a fallos\nD)  Respuesta r\u00e1pida a eventos\nE)  Escalabilidad vertical", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 4, "texto": "\u00bfCu\u00e1l es la principal ventaja de utilizar un backpressure en un sistema reactivo?\nA)  Mejor rendimiento en bases de datos\nB)  Aumento de la latencia\nC)  Prevenci\u00f3n de sobrecarga del sistema\nD)  Reducci\u00f3n del consumo de memoria\nE)  Mayor complejidad de implementaci\u00f3n", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 5, "texto": "\u00bfQu\u00e9 concepto se refiere a la capacidad de un sistema reactivo para continuar funcionando a pesar de fallos?\nA)  Escalabilidad\nB)  Elasticidad\nC)  Resiliencia\nD)  Responsividad\nE)  Modularidad", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}], "preguntas_libres": [{"numero": 6, "texto": "Explique c\u00f3mo la programaci\u00f3n reactiva y el patr\u00f3n de dise\u00f1o \"Command Query Responsibility Segregation\" (CQRS) pueden complementarse para mejorar la escalabilidad y el rendimiento de una aplicaci\u00f3n distribuida.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 7, "texto": "Analice la importancia del manejo de errores y la resiliencia en un sistema distribuido basado en arquitecturas reactivas.  \u00bfQu\u00e9 estrategias se pueden implementar para garantizar la tolerancia a fallos y la recuperaci\u00f3n ante situaciones inesperadas?", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 8, "texto": "Compare y contraste dos frameworks o librer\u00edas populares para la implementaci\u00f3n de arquitecturas reactivas (ej: Spring Reactor, Akka).  Discuta sus fortalezas y debilidades en diferentes contextos de aplicaci\u00f3n.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 9, "texto": "Dise\u00f1e una arquitectura reactiva para una aplicaci\u00f3n de comercio electr\u00f3nico que maneje un alto volumen de transacciones concurrentes, incluyendo la gesti\u00f3n de inventario, procesamiento de pagos y notificaciones al usuario.  Detalle las tecnolog\u00edas y patrones de dise\u00f1o que utilizar\u00eda y justifique sus elecciones.", "puntaje": 1, "respuestaAlumno": ""}], "casos_uso": [{"numero": 10, "descripcion": "Demostrar que el sistema puede escalar el n\u00famero de workers para procesar un aumento en la tasa de ingesta de fragmentos y que la falla simulada de un worker no detiene el procesamiento por parte de otros.\n    -   **Sugerencias de herramientas o enfoques:** Akka Actors/Akka Streams (Scala/Java), RabbitMQ/Kafka para colas de mensajes, Kubernetes para orquestaci\u00f3n y escalado de workers. Considerar el patr\u00f3n de Backpressure.", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 5, "respuestaAlumno": "", "archivoSubido": false}, {"numero": 11, "descripcion": "-   **Escenario pr\u00e1ctico detallado:** Un sistema de gesti\u00f3n de inventario para una cadena de supermercados con cientos de tiendas necesita procesar en tiempo real las ventas de cada caja registradora, actualizar el stock centralizado y generar autom\u00e1ticamente pedidos de reposici\u00f3n a los proveedores cuando", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 5, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-05-31T17:16:36.625345", "expiration": "2025-06-07T22:16:36.476Z", "publicAccess": true}
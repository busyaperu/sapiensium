{"id": "300768d2", "examenData": {"examen_id": "423633", "nombre_examen": "Arquitecturas Reactivas", "tipo_examen": "Evaluaci\u00f3n", "fecha": "2025-06-16T17:32:21.799Z", "nombre_profesor": "Mariela Isabel Camargo Rom\u00e1n", "profesor_id": "16MI765", "preguntas_marcar": [], "preguntas_libres": [{"numero": 1, "texto": "Describe los principios fundamentales de las arquitecturas reactivas y explica c\u00f3mo se diferencian de los enfoques de programaci\u00f3n tradicionales orientados a objetos.", "puntaje": 1, "respuestaAlumno": ""}], "casos_uso": [{"numero": 1, "descripcion": "## Casos de Uso Pr\u00e1cticos: Arquitecturas Reactivas - Preguntas y Escenarios\n\n**1. Sistema de Monitorizaci\u00f3n de Sensores IoT**\n\n*   **Escenario:** Una empresa de agricultura inteligente utiliza una red de sensores IoT para monitorizar la humedad del suelo, la temperatura ambiente y la luz solar en sus campos. Los datos de los sensores llegan en flujos constantes y variables. Necesitan un sistema que procese estos datos en tiempo real para alertar a los agricultores sobre condiciones cr\u00edticas (ej., suelo demasiado seco) y para optimizar el riego.\n*   **Requisitos:** Implementa un sistema que reciba flujos de datos de sensores IoT, filtre los datos relevantes (ej., humedad < 20%), y env\u00ede notificaciones push a una aplicaci\u00f3n m\u00f3vil para los agricultores. Debe ser capaz de escalar para manejar un n\u00famero creciente de sensores.\n*   **Sugerencias:** Reactor, RxJava, Spring WebFlux, Kafka, MQTT.\n\n**2. Plataforma de Trading de Acciones en Tiempo Real**\n\n*   **Escenario:** Una empresa financiera est\u00e1 desarrollando una plataforma de trading de acciones. Los precios de las acciones cambian r\u00e1pidamente y los traders necesitan ver las actualizaciones en tiempo real y ejecutar \u00f3rdenes de compra/venta de forma inmediata.\n*   **Requisitos:** Dise\u00f1a un sistema que reciba actualizaciones de precios de acciones desde m\u00faltiples fuentes (APIs de bolsas), calcule indicadores t\u00e9cnicos (ej., medias m\u00f3viles) y permita a los usuarios realizar operaciones de trading con baja latencia. El sistema debe manejar un alto volumen de transacciones concurrentes.\n*   **Sugerencias:** Akka Streams, Vert.x, gRPC, Protocol Buffers, Redis.\n\n**3. Sistema de Recomendaci\u00f3n de Productos en Ecommerce**\n\n*   **Escenario:** Un sitio de comercio electr\u00f3nico quiere mejorar su motor de recomendaci\u00f3n de productos. Necesitan analizar el comportamiento de los usuarios (ej., productos vistos, compras realizadas) en tiempo real para ofrecer recomendaciones personalizadas y relevantes.\n*   **Requisitos:** Implementa un sistema que procese eventos de interacci\u00f3n del usuario (ej., clicks, compras) en tiempo real, calcule la afinidad del usuario con diferentes productos y genere una lista de recomendaciones personalizadas. El sistema debe ser capaz de adaptarse r\u00e1pidamente a los cambios en el comportamiento del usuario.\n*   **Sugerencias:** Apache Kafka Streams, Apache Flink, Cassandra, Spark Streaming, Event Sourcing.\n\n**4. Chat en Tiempo Real para Servicio al Cliente**\n\n*   **Escenario:** Una empresa de soporte al cliente desea implementar un sistema de chat en tiempo real para ayudar a sus clientes. Necesitan un sistema que pueda manejar un gran n\u00famero de conexiones concurrentes y proporcionar una comunicaci\u00f3n r\u00e1pida y confiable.\n*   **Requisitos:** Desarrolla un servidor de chat que permita a los clientes y agentes de soporte comunicarse en tiempo real. El sistema debe manejar el registro de usuarios, la gesti\u00f3n de salas de chat y el env\u00edo de mensajes. Debe ser escalable para soportar picos de demanda.\n*   **Sugerencias:** Socket.IO, Netty, Spring WebSockets, RabbitMQ, ZeroMQ.\n\n**5. Sistema de Detecci\u00f3n de Fraudes en Transacciones Financieras**\n\n*   **Escenario:** Un banco necesita un sistema para detectar transacciones fraudulentas en tiempo real. El sistema debe analizar diversas caracter\u00edsticas de cada transacci\u00f3n (ej., monto, ubicaci\u00f3n, historial del usuario) y alertar a los analistas de fraude si se detecta una actividad sospechosa.\n*   **Requisitos:** Implementa un sistema que reciba flujos de datos de transacciones financieras, aplique reglas de detecci\u00f3n de fraude y genere alertas en tiempo real. El sistema debe ser capaz de adaptarse a nuevos patrones de fraude y minimizar los falsos positivos.\n*   **Sugerencias:** Apache Kafka, Apache Flink, Drools, Machine Learning (ej., modelos de detecci\u00f3n de anomal\u00edas), Elasticsearch.", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 1, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-06-16T12:32:21.835357", "expiration": "2025-06-23T17:32:21.799Z", "publicAccess": true}
{"id": "f0dc0912", "examenData": {"examen_id": "470771", "nombre_examen": "Programaci\u00f3n UML", "tipo_examen": "Evaluaci\u00f3n", "fecha": "2025-04-30T21:16:26.048Z", "nombre_profesor": "Mariela Isabel Camargo Rom\u00e1n", "profesor_id": "16MI987", "preguntas_marcar": [{"numero": 1, "texto": "\u00bfQu\u00e9 patr\u00f3n de dise\u00f1o se utiliza com\u00fanmente para manejar la retropresi\u00f3n en sistemas reactivos?", "puntaje": 1, "opciones": [{"texto": "Singleton", "valor": "A"}, {"texto": "Factory", "valor": "B"}, {"texto": "Circuit Breaker", "valor": "C"}, {"texto": "Observer", "valor": "D"}, {"texto": "Decorator", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 2, "texto": "\u00bfCu\u00e1l es la principal ventaja de usar un sistema de mensajes asincr\u00f3nico en una arquitectura reactiva?", "puntaje": 1, "opciones": [{"texto": "Acoplamiento estrecho", "valor": "A"}, {"texto": "Mayor latencia", "valor": "B"}, {"texto": "Desacoplar componentes", "valor": "C"}, {"texto": "Complejidad reducida", "valor": "D"}, {"texto": "Mayor consumo de recursos", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 3, "texto": "\u00bfQu\u00e9 tecnolog\u00eda se utiliza a menudo para implementar sistemas reactivos distribuidos?", "puntaje": 1, "opciones": [{"texto": "SOAP", "valor": "A"}, {"texto": "REST", "valor": "B"}, {"texto": "gRPC", "valor": "C"}, {"texto": "Akka", "valor": "D"}, {"texto": "CORBA", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 4, "texto": "\u00bfQu\u00e9 concepto se refiere a la capacidad de un sistema reactivo para mantenerse responsivo bajo carga variable?", "puntaje": 1, "opciones": [{"texto": "Resiliencia", "valor": "A"}, {"texto": "Elasticidad", "valor": "B"}, {"texto": "Orientado a mensajes", "valor": "C"}, {"texto": "Aislamiento de fallos", "valor": "D"}, {"texto": "Retropresi\u00f3n", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 5, "texto": "\u00bfCu\u00e1l de las siguientes NO es una caracter\u00edstica t\u00edpica de un sistema reactivo?", "puntaje": 1, "opciones": [{"texto": "Tolerancia a fallos", "valor": "A"}, {"texto": "Estado mutable compartido", "valor": "B"}, {"texto": "Retropresi\u00f3n", "valor": "C"}, {"texto": "No bloqueante", "valor": "D"}, {"texto": "Concurrencia", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 6, "texto": "\u00bfQu\u00e9 patr\u00f3n de mensajer\u00eda describe un flujo continuo de datos entre un emisor y un receptor?", "puntaje": 1, "opciones": [{"texto": "Publish-Subscribe", "valor": "A"}, {"texto": "Request-Response", "valor": "B"}, {"texto": "Streaming", "valor": "C"}, {"texto": "Circuit Breaker", "valor": "D"}, {"texto": "Command Query Responsibility Segregation (CQRS)", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 7, "texto": "En el contexto de sistemas reactivos, \u00bfqu\u00e9 significa \"backpressure\"?", "puntaje": 1, "opciones": [{"texto": "Un mecanismo para manejar errores", "valor": "A"}, {"texto": "Un m\u00e9todo para escalar sistemas", "valor": "B"}, {"texto": "Una forma de controlar el flujo de datos de un emisor a un receptor", "valor": "C"}, {"texto": "Un tipo de sistema de mensajer\u00eda", "valor": "D"}, {"texto": "Una t\u00e9cnica de optimizaci\u00f3n de rendimiento", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 8, "texto": "\u00bfCu\u00e1l de las siguientes es una herramienta o biblioteca com\u00fanmente utilizada para construir sistemas reactivos?", "puntaje": 1, "opciones": [{"texto": "AngularJS", "valor": "A"}, {"texto": "ReactJS", "valor": "B"}, {"texto": "Vue.js", "valor": "C"}, {"texto": "RxJava", "valor": "D"}, {"texto": "jQuery", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 9, "texto": "\u00bfQu\u00e9 principio de dise\u00f1o reactivo se centra en aislar los fallos para evitar que se propaguen por todo el sistema?", "puntaje": 1, "opciones": [{"texto": "Responsividad", "valor": "A"}, {"texto": "Resiliencia", "valor": "B"}, {"texto": "Elasticidad", "valor": "C"}, {"texto": "Orientado a mensajes", "valor": "D"}, {"texto": "Aislamiento de fallos", "valor": "E"}], "respuestaSeleccionada": null}], "preguntas_libres": [{"numero": 1, "texto": "Describe c\u00f3mo el principio de \"aislamiento de fallos\" se implementa en una arquitectura reactiva y proporciona un ejemplo concreto de c\u00f3mo se maneja un fallo en un componente sin afectar a todo el sistema.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 2, "texto": "Explica c\u00f3mo el backpressure contribuye a la resiliencia de un sistema reactivo. Describe diferentes estrategias para implementar backpressure y analiza sus ventajas e inconvenientes.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 3, "texto": "Dise\u00f1a un escenario donde se necesite implementar un sistema reactivo distribuido. Describe los componentes clave y c\u00f3mo se comunicar\u00edan entre s\u00ed utilizando principios reactivos. Considera aspectos como la consistencia eventual y la tolerancia a fallos.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 4, "texto": "Analiza las ventajas y desventajas de utilizar un framework reactivo en un proyecto de software. Considera factores como la complejidad del proyecto, la experiencia del equipo y los requisitos de rendimiento y escalabilidad.  \u00bfEn qu\u00e9 situaciones recomendar\u00edas *no* utilizar un framework reactivo y por qu\u00e9?", "puntaje": 1, "respuestaAlumno": ""}], "casos_uso": [{"numero": 1, "descripcion": "1.\n   - Escenario pr\u00e1ctico detallado: Una plataforma de trading financiero en tiempo real que recibe flujos constantes de datos de mercado (precios, volumen) de m\u00faltiples fuentes, procesa \u00f3rdenes de compra/venta a muy alta velocidad y debe notificar a los usuarios sobre cambios relevantes en sus posiciones o el mercado con m\u00ednima latencia. La estabilidad y la capacidad de manejar picos de datos son cr\u00edticas.\n   - Requisitos espec\u00edficos: Analizar el escenario y generar dos preguntas pr\u00e1cticas sobre c\u00f3mo una arquitectura reactiva podr\u00eda abordar desaf\u00edos espec\u00edficos del trading en tiempo real, centr\u00e1ndose cada pregunta en un caso de uso reactivo distinto dentro de este contexto (ej. manejo eficiente de streams de datos de mercado, aplicaci\u00f3n de backpressure en el procesamiento de \u00f3rdenes).\n   - Sugerencias de herramientas o enfoques: Considerar conceptos como streams de datos reactivos, manejo de backpressure, tolerancia a fallos, concurrencia as\u00edncrona. Herramientas: Kafka, Akka, Spring WebFlux, Project Reactor, RxJava.\n\n2.\n   - Escenario pr\u00e1ctico detallado: Un sistema de monitoreo para una red masiva de dispositivos IoT (millones de sensores distribuidos). Los dispositivos env\u00edan datos de telemetr\u00eda (temperatura, vibraci\u00f3n, estado) continuamente. El sistema debe ingerir este volumen extremo de datos, realizar an\u00e1lisis preliminares en tiempo real, detectar anomal\u00edas y activar alertas, manteniendo la operaci\u00f3n a pesar de la variabilidad en la tasa de datos y posibles fallos en nodos de recolecci\u00f3n.\n   - Requisitos espec\u00edficos: Dado este escenario de IoT a gran escala, generar dos preguntas que exploren aplicaciones concretas de arquitecturas reactivas para la ingesta y procesamiento de datos de sensores, cada pregunta abordando un aspecto diferente y fundamental (ej. escalabilidad horizontal de la ingesta de datos, procesamiento de streams de eventos para detecci\u00f3n de anomal\u00edas).\n   - Sugerencias de herramientas o enfoques: Pensar en procesamiento de eventos (event streams), escalabilidad masiva, resiliencia distribuida, patrones de ingesta de datos. Herramientas: Apache Flink/Kafka Streams, Akka Streams, MQTT, Apache NiFi, Kafka.\n\n3.\n   - Escenario pr\u00e1ctico detallado: El backend de un juego multijugador online competitivo con miles de jugadores concurrentes. El sistema gestiona el matchmaking, sincroniza el estado del juego entre todos los participantes en tiempo real, maneja interacciones r\u00e1pidas del juego y debe ser altamente disponible y tolerante a fallos de red o desconexiones de jugadores individuales sin afectar la partida para otros. La baja latencia es vital.\n   - Requisitos espec\u00edficos: Para este entorno de juego online de alta concurrencia y baja latencia, formular dos preguntas enfocadas en c\u00f3mo los principios reactivos pueden mejorar la experiencia del usuario y la robustez del backend, cada una orientada a un caso de uso reactivo distinto (ej. sincronizaci\u00f3n de estado del juego en tiempo real mediante streams, manejo resiliente de conexiones de jugadores y sus fallos).\n   - Sugerencias de herramientas o enfoques: Considerar manejo de estado concurrente, comunicaci\u00f3n en tiempo real (WebSockets, UDP), tolerancia a fallos, escalabilidad el\u00e1stica. Herramientas: Akka, Vert.x, Netty, WebSockets, gRPC, Redis (Pub/Sub).\n\n4.\n   - Escenario pr\u00e1ctico detallado: Una plataforma de e-commerce de alto tr\u00e1fico que experimenta picos masivos de pedidos durante eventos de venta (ej. Black Friday). El sistema debe procesar miles de pedidos por minuto, actualizar el inventario en tiempo real, gestionar pagos y coordinar con m\u00faltiples servicios externos (env\u00edo, pago, notificaciones) de forma eficiente y resiliente. Un fallo en un servicio externo no debe impedir el procesamiento de otros pedidos.\n   - Requisitos espec\u00edficos: Analizar el escenario de e-commerce de alta demanda y generar dos preguntas sobre c\u00f3mo una arquitectura reactiva podr\u00eda optimizar el flujo de pedidos y la gesti\u00f3n de dependencias externas, cada pregunta explorando un caso de uso reactivo diferente (ej. procesamiento as\u00edncrono y resiliente de pedidos, aplicaci\u00f3n de backpressure al interactuar con pasarelas de pago externas).\n   - Sugerencias de herramientas o enfoques: Pensar en procesamiento de eventos, coreograf\u00eda/orquestaci\u00f3n de servicios, backpressure, resiliencia (Circuit Breaker), colas de mensajes. Herramientas: Spring Integration/Spring Cloud Stream, Kafka, RabbitMQ, Saga pattern, Circuit Breaker pattern.\n\n5.\n   - Escenario pr\u00e1ctico detallado: Un sistema de agregaci\u00f3n de feeds de redes sociales y env\u00edo de notificaciones push personalizadas. El sistema consume datos de m\u00faltiples APIs de redes sociales (Twitter, Facebook, Instagram, etc.), filtra y agrega contenido relevante para cada usuario y env\u00eda notificaciones push personalizadas a millones de dispositivos m\u00f3viles en tiempo real. Debe manejar la variabilidad en la velocidad y disponibilidad de las APIs externas y gestionar la alta carga del servicio de notificaciones.\n   - Requisitos espec\u00edficos: Para este escenario de agregaci\u00f3n de feeds y notificaciones a gran escala, generar dos preguntas sobre la aplicaci\u00f3n de arquitecturas reactivas para mejorar la eficiencia y resiliencia del sistema, cada pregunta centrada en un caso de uso reactivo distinto (ej. consumo y transformaci\u00f3n continua de streams de datos de APIs externas, manejo de alta concurrencia y backpressure en el env\u00edo de notificaciones push).\n   - Sugerencias de herramientas o enfoques: Considerar procesamiento de streams, integraci\u00f3n de APIs as\u00edncronas, manejo de alta concurrencia, backpressure. Herramientas: Apache NiFi/StreamSets, Kafka/Pulsar, Spring WebFlux, gRPC, WebSockets, sistemas de colas de mensajes.", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 1, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-04-30T16:16:26.101135", "expiration": "2025-05-07T21:16:26.048Z", "publicAccess": true}
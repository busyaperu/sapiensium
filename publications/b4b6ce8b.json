{"id": "b4b6ce8b", "examenData": {"id": "770388", "fecha": "2025-04-08", "profesor": "Mariela Isabel Camargo Roman", "nombreAlumno": "", "idAlumno": "", "bloqueado": true, "preguntasMarcar": [{"numero": 1, "texto": "1-1) \u00bfCu\u00e1l de los siguientes es un principio fundamental de las arquitecturas reactivas?", "puntaje": 1, "opciones": [{"texto": "A) Acoplamiento fuerte entre componentes", "valor": "A"}, {"texto": "B) Tolerancia a fallos mediante aislamiento", "valor": "B"}, {"texto": "C) Sincronizaci\u00f3n forzada de procesos", "valor": "C"}, {"texto": "D) Centralizaci\u00f3n del manejo de estado", "valor": "D"}, {"texto": "E) Uso exclusivo de bases de datos relacionales", "valor": "E"}], "respuestaSeleccionada": null}], "preguntasLibres": [{"numero": 1, "texto": "1-1. Compara y contrasta las arquitecturas en capas y la arquitectura hexagonal, explicando sus principales caracter\u00edsticas, ventajas, desventajas y casos de uso t\u00edpicos. \u00bfEn qu\u00e9 situaciones ser\u00eda m\u00e1s recomendable utilizar una sobre la otra? (Nivel: avanzado)", "puntaje": 1, "respuestaAlumno": ""}], "casosUso": [{"numero": 1, "descripcion": "**Caso 1-1**  \n\n**Escenario pr\u00e1ctico:**  \nUna plataforma de comercio electr\u00f3nico necesita manejar picos de tr\u00e1fico durante eventos como el Black Friday, donde la demanda de productos puede aumentar dr\u00e1sticamente en segundos. El sistema debe procesar solicitudes de compra, actualizar inventarios en tiempo real y notificar a los usuarios sin colapsar.  \n\n**Preguntas de caso de uso:**  \n1. \u00bfC\u00f3mo dise\u00f1ar\u00edas un sistema reactivo que escale autom\u00e1ticamente durante picos de tr\u00e1fico, garantizando disponibilidad y consistencia de datos?  \n2. \u00bfQu\u00e9 estrategias aplicar\u00edas para manejar fallos en servicios cr\u00edticos (ej: procesamiento de pagos) sin afectar la experiencia del usuario?  \n\n**Requisitos espec\u00edficos:**  \n- Implementar un sistema basado en mensajer\u00eda as\u00edncrona para desacoplar componentes.  \n- Garantizar consistencia eventual en la actualizaci\u00f3n de inventarios.  \n- Dise\u00f1ar un mecanismo de reintentos y circuit breakers para manejo de fallos.  \n\n**Sugerencias de herramientas/enfoques:**  \n- Herramientas: Kafka, Akka, Spring WebFlux, Redis.  \n- Enfoques: Patr\u00f3n CQRS, Event Sourcing, escalado autom\u00e1tico con Kubernetes.", "pregunta": "Pregunta sobre el caso de uso", "puntaje": 1, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-04-08T08:19:30.594726", "expiration": "2025-04-15T13:19:30.548Z", "publicAccess": true}
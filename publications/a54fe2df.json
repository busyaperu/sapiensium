{"id": "a54fe2df", "examenData": {"examen_id": "832113", "nombre_examen": "Arquitecturas Reactivas", "tipo_examen": "Evaluaci\u00f3n", "fecha": "2025-05-27T15:29:09.343Z", "nombre_profesor": "Mariela Isabel Camargo Rom\u00e1n", "profesor_id": "16MI987", "preguntas_marcar": [{"numero": 1, "texto": "\u00bfQu\u00e9 patr\u00f3n de dise\u00f1o se utiliza a menudo para manejar la concurrencia en sistemas reactivos?\nA) Singleton\nB) Factory\nC) Actor\nD) Observer\nE) Strategy", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 2, "texto": "\u00bfCu\u00e1l es la principal ventaja del uso de un backpressure en un sistema reactivo?\nA) Mayor velocidad de procesamiento\nB) Menor latencia\nC) Prevenci\u00f3n de sobrecarga del sistema\nD) Simplificaci\u00f3n del c\u00f3digo\nE) Aumento del consumo de recursos", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 3, "texto": "\u00bfQu\u00e9 tecnolog\u00eda es com\u00fanmente utilizada para implementar flujos de datos reactivos?\nA) JDBC\nB) Spring MVC\nC) RxJava\nD) Hibernate\nE) Struts", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 4, "texto": "\u00bfCu\u00e1l de las siguientes afirmaciones sobre los eventos en un sistema reactivo es FALSA?\nA) Son asincr\u00f3nicos\nB) Son procesados en orden secuencial siempre\nC) Pueden ser procesados en paralelo\nD) Son inmutables\nE) Son fundamentales para la comunicaci\u00f3n entre componentes", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 5, "texto": "\u00bfQu\u00e9 concepto permite a un sistema reactivo recuperarse de fallos de forma transparente?\nA) Backpressure\nB) Resiliencia\nC) Elasticidad\nD) Responsividad\nE) Mensajer\u00eda as\u00edncrona", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 6, "texto": "\u00bfQu\u00e9 patr\u00f3n de dise\u00f1o se utiliza com\u00fanmente en arquitecturas reactivas para manejar la concurrencia de manera eficiente?\nA) Singleton\nB) Factory\nC) Actor\nD) Observer\nE) Strategy", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 7, "texto": "Un sistema reactivo debe ser capaz de manejar fallos sin afectar la disponibilidad general. \u00bfQu\u00e9 caracter\u00edstica describe esto?\nA) Elasticidad\nB) Responsividad\nC) Resiliencia\nD) Orientaci\u00f3n a mensajes\nE) Programaci\u00f3n funcional", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 8, "texto": "\u00bfCu\u00e1l de las siguientes tecnolog\u00edas NO se asocia t\u00edpicamente con las arquitecturas reactivas?\nA) Kafka\nB) Akka\nC) Spring Reactor\nD) JDBC\nE) RxJava", "puntaje": 1, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 9, "texto": "La elasticidad en una arquitectura reactiva se refiere a la capacidad de:\nA) Recuperarse de fallos r\u00e1pidamente.\nB) Adaptarse a cambios en la carga de trabajo.\nC) Manejar un gran volumen de mensajes.\nD) Mantener la consistencia de datos.\nE) Implementar la programaci\u00f3n funcional.", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 10, "texto": "\u00bfQu\u00e9 concepto permite la propagaci\u00f3n eficiente de eventos en un sistema reactivo distribuido?\nA) Backpressure\nB) Inmutabilidad\nC) Concurrencia\nD) Programaci\u00f3n imperativa\nE) Monitoreo", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 11, "texto": "\u00bfQu\u00e9 patr\u00f3n de dise\u00f1o se utiliza com\u00fanmente para manejar la concurrencia en arquitecturas reactivas?\nA) Singleton\nB) Factory\nC) Actor\nD) Observer\nE) Strategy", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 12, "texto": "\u00bfCu\u00e1l es la principal ventaja del uso de backpressure en un sistema reactivo?\nA) Mayor velocidad de procesamiento\nB) Menor latencia\nC) Prevenci\u00f3n de sobrecarga del sistema\nD) Mejor manejo de errores\nE) Simplificaci\u00f3n del c\u00f3digo", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 13, "texto": "\u00bfQu\u00e9 tecnolog\u00eda es ampliamente utilizada para implementar flujos de datos reactivos?\nA) Spring Boot\nB) Apache Kafka\nC) RxJava\nD) Hibernate\nE) JPA", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 14, "texto": "\u00bfCu\u00e1l de las siguientes afirmaciones sobre los eventos en un sistema reactivo es FALSA?\nA) Son as\u00edncronos\nB) Son inmutables\nC) Son procesados secuencialmente siempre\nD) Pueden ser procesados en paralelo\nE) Son observables", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 15, "texto": "\u00bfQu\u00e9 tipo de arquitectura es la m\u00e1s adecuada para implementar sistemas reactivos distribuidos a gran escala?\nA) Monol\u00edtica\nB) Microservicios\nC) Cliente-Servidor tradicional\nD) Pipes and Filters\nE) Layered", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 16, "texto": "\u00bfQu\u00e9 patr\u00f3n de dise\u00f1o se utiliza com\u00fanmente en arquitecturas reactivas para manejar la concurrencia?\nA) Singleton\nB) Factory\nC) Actor\nD) Observer\nE) Strategy", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 17, "texto": "\u00bfCu\u00e1l es la principal ventaja de utilizar un backpressure en un sistema reactivo?\nA) Mayor velocidad de procesamiento\nB) Menor latencia\nC) Prevenci\u00f3n de sobrecarga del sistema\nD) Aumento del throughput\nE) Simplificaci\u00f3n del c\u00f3digo", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 18, "texto": "\u00bfQu\u00e9 tecnolog\u00eda es ampliamente utilizada para implementar flujos de datos reactivos?\nA) JDBC\nB) Spring MVC\nC) RxJava\nD) Hibernate\nE) JPA", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 19, "texto": "\u00bfCu\u00e1l de las siguientes afirmaciones sobre la elasticidad en arquitecturas reactivas es FALSA?\nA) Permite escalar recursos seg\u00fan la demanda.\nB) Reduce los costos operativos.\nC) Implica una configuraci\u00f3n est\u00e1tica de recursos.\nD) Mejora la capacidad de respuesta del sistema.\nE) Se adapta a las fluctuaciones de carga.", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}, {"numero": 20, "texto": "\u00bfQu\u00e9 concepto describe la capacidad de un sistema reactivo para continuar funcionando a pesar de fallos?\nA) Elasticidad\nB) Responsividad\nC) Resiliencia\nD) Mensajes\nE) Backpressure", "puntaje": 0.2, "opciones": [{"texto": "Opci\u00f3n A", "valor": "A"}, {"texto": "Opci\u00f3n B", "valor": "B"}, {"texto": "Opci\u00f3n C", "valor": "C"}, {"texto": "Opci\u00f3n D", "valor": "D"}, {"texto": "Opci\u00f3n E", "valor": "E"}], "respuestaSeleccionada": null}], "preguntas_libres": [{"numero": 21, "texto": "Explique c\u00f3mo la programaci\u00f3n reactiva aborda el problema de la gesti\u00f3n de la concurrencia y la escalabilidad en sistemas distribuidos,  detallando el rol de los patrones de dise\u00f1o como el Reactor y el Actor.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 22, "texto": "Analice un escenario real donde la implementaci\u00f3n de una arquitectura reactiva haya sido crucial para el \u00e9xito de un proyecto, justificando su elecci\u00f3n y describiendo los beneficios obtenidos.  Incluya ejemplos concretos de tecnolog\u00edas utilizadas.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 23, "texto": "Compare y contraste dos frameworks de programaci\u00f3n reactiva populares (ej. Spring Reactor y Akka), enfoc\u00e1ndose en sus diferencias en cuanto a modelo de programaci\u00f3n, manejo de errores y escalabilidad.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 24, "texto": "Discuta los desaf\u00edos de implementar y mantener una arquitectura reactiva a gran escala, incluyendo consideraciones sobre la monitorizaci\u00f3n, el despliegue y la depuraci\u00f3n en un entorno de microservicios.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 25, "texto": "Explique c\u00f3mo la programaci\u00f3n reactiva, con el uso de Observables o similares, contribuye a la construcci\u00f3n de sistemas resilientes frente a fallos en componentes individuales dentro de una arquitectura reactiva distribuida.  D\u00e9 ejemplos concretos.", "puntaje": 1, "respuestaAlumno": ""}, {"numero": 26, "texto": "Analice la importancia del backpressure en una arquitectura reactiva, describiendo diferentes estrategias para su manejo y sus implicaciones en el rendimiento y la estabilidad del sistema.  \u00bfC\u00f3mo se puede evitar la sobrecarga del sistema?", "puntaje": 1.2, "respuestaAlumno": ""}], "casos_uso": [{"numero": 27, "descripcion": "\nEscenario: Una plataforma de comercio electr\u00f3nico de alto tr\u00e1fico necesita procesar miles de pedidos por minuto de forma resiliente y el\u00e1stica, gestionando inventario, pagos y notificaciones a cliente de manera desacoplada.\nRequisitos: Dise\u00f1ar la arquitectura de un sistema que maneje el flujo de pedidos desde la recepci\u00f3n hasta la confirmaci\u00f3n, asegurando que los fallos en un paso no detengan todo el proceso y que pueda escalar f\u00e1cilmente.\nSugerencias: Patrones de Event Sourcing, CQRS; Tecnolog\u00edas como Apache Kafka, RabbitMQ, Akka, Spring WebFlux, Reactor.\n1. Describe un caso de uso reactivo para la ingesta inicial de pedidos y su validaci\u00f3n preliminar as\u00edncrona.\n2. Describe un caso de uso reactivo para la actualizaci\u00f3n del inventario y la emisi\u00f3n de notificaciones una vez que un pago es confirmado.\n\n", "pregunta": " Dise\u00f1ar la arquitectura de un sistema que maneje el flujo de pedidos desde la recepci\u00f3n hasta la confirmaci\u00f3n, asegurando que los fallos en un paso no detengan todo el proceso y que pueda escalar f\u00e1cilmente.", "puntaje": 4, "respuestaAlumno": "", "archivoSubido": false}, {"numero": 28, "descripcion": "\n    - Escenario pr\u00e1ctico detallado relacionado con genera 2 preguntas casos de uso Arquitecturas reactivas un caso por pregunta: Una empresa de an\u00e1lisis de datos burs\u00e1tiles en tiempo real necesita construir una plataforma que ingiera feeds de precios de alta frecuencia, realice c\u00e1lculos de indicadores t\u00e9cnicos y env\u00ede alertas a los traders con baja latencia. Est\u00e1n considerando una arquitectura reactiva para manejar el volumen y la velocidad de los datos. El estudiante debe identificar dos casos de uso espec\u00edficos dentro de esta plataforma donde los principios reactivos son cruciales y formular una pregunta clave sobre la aplicaci\u00f3n de la arquitectura reactiva a cada uno.\n    - Requisitos espec\u00edficos de lo que debe implementar el estudiante: El estudiante debe identificar dos casos de uso distintos dentro de una plataforma de an\u00e1lisis burs\u00e1til en tiempo real (ej. ingesta de feeds de precios, c\u00e1lculo de indicadores, env\u00edo de alertas). Para cada caso de uso identificado, el estudiante debe generar una pregunta espec\u00edfica y relevante sobre c\u00f3mo la arquitectura reactiva aborda los desaf\u00edos o proporciona beneficios para ese caso de uso particular. Las preguntas deben ser numeradas secuencialmente 1 y 2.\n    - Sugerencias de herramientas o enfoques que podr\u00eda utilizar: Reactive Manifesto, Reactive Streams, Akka Streams, Reactor, Kafka, Websockets.\n\n", "pregunta": "Desarrolle una soluci\u00f3n para el caso descrito anteriormente", "puntaje": 5, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-05-27T10:29:09.421989", "expiration": "2025-06-03T15:29:09.343Z", "publicAccess": true}
{"id": "c8a7f5a9", "examenData": {"id": "256887", "fecha": "2025-04-08", "profesor": "Mariela Isabel Camargo Roman", "nombreAlumno": "", "idAlumno": "", "bloqueado": true, "preguntasMarcar": [{"numero": 1, "texto": "1-1) \u00bfCu\u00e1l de los siguientes es un principio fundamental de las arquitecturas reactivas?", "puntaje": 1, "opciones": [{"texto": "A) Acoplamiento fuerte entre componentes", "valor": "A"}, {"texto": "B) Tolerancia al fallo", "valor": "B"}, {"texto": "C) Uso exclusivo de bases de datos relacionales", "valor": "C"}, {"texto": "D) Sinc# Intermediate Algorithm Scripting: Convert HTML Entities\n\nConvert the characters &, <, >, \" (double quote), and ' (apostrophe), in a string to their corresponding HTML entities.\n\n### Solution\n\n```javascript\nfunction convertHTML(str) {\n  // &colon;&rpar;\n  str = str.replace(/&/g, \"&amp;\");\n  str = str.replace(/</g, \"&lt;\");\n  str = str.replace(/>/g, \"&gt;\");\n  str = str.replace(/\"/g, \"&quot;\");\n  str = str.replace(/'/g, \"&apos;\");\n  return str;\n}\n```\n\n#### Explanation\n- The function uses a series of regular expressions to replace special characters in the input string with their corresponding HTML entities.\n- Each line targets a specific character:\n  - `&` is replaced with `&amp;`\n  - `<` is replaced with `&lt;`\n  - `>` is replaced with `&gt;`\n  - `\"` is replaced with `&quot;`\n  - `'` is replaced with `&apos;`\n- The function then returns the modified string with all special characters converted to HTML entities.\n\n### Alternative Solution\n\n```javascript\nfunction convertHTML(str) {\n  // Use Object Lookup to declare as many HTML entities as needed.\n  const htmlEntities = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\",\n    \"'\": \"&apos;\"\n  };\n  // Use map function to return a filtered str with all entities changed automatically.\n  return str\n    .split(\"\")\n    .map(entity => htmlEntities[entity] || entity)\n    .join(\"\");\n}\n```\n\n#### Explanation\n- This solution uses an object (`htmlEntities`) to map each special character to its corresponding HTML entity.\n- The input string is split into an array of characters using `split(\"\")`.\n- The `map` function is then used to iterate over each character in the array. For each character:\n  - If the character exists as a key in `htmlEntities`, it is replaced with the corresponding value (HTML entity).\n  - If the character does not exist in `htmlEntities`, it remains unchanged.\n- Finally, the modified array of characters is joined back into a string using `join(\"\")` and returned.\n\n### Alternative Solution\n\n```javascript\nfunction convertHTML(str) {\n  // Use Object Lookup to declare as many HTML entities as needed.\n  const htmlEntities = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\",\n    \"'\": \"&apos;\"\n  };\n  // Using a regex, replace characters with it's corresponding html entity\n  return str.replace(/([&<>\\\"'])/g, match => htmlEntities[match]);\n}\n```\n\n#### Explanation\n- This solution also uses an object (`htmlEntities`) to map special characters to their HTML entities.\n- The `replace` method is used with a regular expression `/([&<>\\\"'])/g` to match any of the characters `&`, `<`, `>`, `\"`, or `'`.\n- For each matched character, the corresponding HTML entity is fetched from `htmlEntities` and used as the replacement.\n- The modified string is then returned.\n\n### Alternative Solution\n\n```javascript\nfunction convertHTML(str) {\n  const charsToReplace = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\",\n    \"'\": \"&apos;\"\n  };\n\n  return str.replace(/[&<>\"']/g, char => charsToReplace[char]);\n}\n```\n\n#### Explanation\n- Similar to the previous solutions, this approach uses an object (`charsToReplace`) to map special characters to their HTML entities.\n- The `replace` method is used with a regular expression `/[&<>\"']/g` to match any of the specified characters.\n- For each matched character, the corresponding HTML entity is fetched from `charsToReplace` and used as the replacement.\n- The modified string is then returned. This solution is concise and leverages the same principles as the previous ones but with a slightly different syntax.", "valor": "D"}], "respuestaSeleccionada": null}], "preguntasLibres": [{"numero": 1, "texto": "1-1 Compara y contrasta las ventajas y desventajas de la arquitectura en capas frente a la arquitectura hexagonal, considerando aspectos como acoplamiento, escalabilidad y mantenibilidad. Proporciona ejemplos concretos de escenarios donde cada una ser\u00eda m\u00e1s adecuada. (nivel: intermedio)", "puntaje": 1, "respuestaAlumno": ""}], "casosUso": [{"numero": 1, "descripcion": "**Caso de uso 1-1:**  \n\n**Escenario pr\u00e1ctico:**  \nUna plataforma de comercio electr\u00f3nico necesita manejar picos de tr\u00e1fico durante eventos como el Black Friday, garantizando alta disponibilidad y respuestas en tiempo real para actualizaciones de inventario y procesamiento de pedidos.  \n\n**Preguntas de caso de uso:**  \n1. \u00bfC\u00f3mo dise\u00f1ar\u00edas un sistema reactivo que escale autom\u00e1ticamente durante picos de demanda?  \n2. \u00bfQu\u00e9 patrones reactivos aplicar\u00edas para garantizar consistencia en los datos de inventario entre m\u00faltiples microservicios?  \n\n**Requisitos espec\u00edficos:**  \n- Implementar un sistema basado en mensajer\u00eda as\u00edncrona.  \n- Usar balanceo de carga y escalado autom\u00e1tico.  \n- Asegurar consistencia eventual en los datos.  \n\n**Sugerencias de herramientas/enfoques:**  \n- Herramientas: Kafka, Akka, Kubernetes, Reactor.  \n- Enfoques: Patr\u00f3n CQRS, Event Sourcing, Backpressure.", "pregunta": "Pregunta sobre el caso de uso", "puntaje": 1, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-04-07T20:17:39.706780", "expiration": "2025-04-15T01:17:39.643Z", "publicAccess": true}
{"id": "f5adcbba", "examenData": {"id": "804660", "fecha": "2025-04-08", "profesor": "Mariela Isabel Camargo Roman", "nombreAlumno": "", "idAlumno": "", "bloqueado": true, "preguntasMarcar": [{"numero": 1, "texto": "1-1) \u00bfCu\u00e1l de los siguientes es un principio fundamental de las arquitecturas reactivas?", "puntaje": 1, "opciones": [{"texto": "A) Acoplamiento fuerte entre componentes", "valor": "A"}, {"texto": "B) Tolerancia al fallo", "valor": "B"}, {"texto": "C) Uso exclusivo de bases de datos relacionales", "valor": "C"}, {"texto": "D) Procesamiento por lotes (batch)", "valor": "D"}, {"texto": "E) Bloques monol\u00edticos centralizados", "valor": "E"}], "respuestaSeleccionada": null}], "preguntasLibres": [{"numero": 1, "texto": "1-1. Compara y contrasta las arquitecturas en capas y hexagonal en t\u00e9rminos de acoplamiento, cohesi\u00f3n y escalabilidad. Explica con ejemplos concretos en qu\u00e9 escenarios ser\u00eda m\u00e1s adecuado utilizar cada una y por qu\u00e9. (Avanzado)", "puntaje": 1, "respuestaAlumno": ""}], "casosUso": [{"numero": 1, "descripcion": "**Caso 1-1**  \n\n**Escenario pr\u00e1ctico:**  \nUna plataforma de comercio electr\u00f3nico necesita manejar picos de tr\u00e1fico durante eventos de ventas flash sin degradar el rendimiento. Debes dise\u00f1ar un sistema reactivo que procese \u00f3rdenes de compra de manera as\u00edncrona y escalable, garantizando consistencia eventual y tolerancia a fallos.  \n\n**Preguntas de caso de uso:**  \n1. \u00bfC\u00f3mo utilizar\u00edas el patr\u00f3n Event Sourcing para garantizar la trazabilidad de las \u00f3rdenes y permitir la recuperaci\u00f3n ante fallos?  \n2. \u00bfQu\u00e9 estrategias aplicar\u00edas para desacoplar los microservicios de procesamiento de pagos y env\u00edo de notificaciones usando mensajer\u00eda reactiva?  \n\n**Requisitos espec\u00edficos:**  \n- Implementar un bus de eventos (ej. Apache Kafka o RabbitMQ) para manejar los mensajes de \u00f3rdenes.  \n- Usar proyecciones para reconstruir el estado de las \u00f3rdenes desde los eventos.  \n- Garantizar el procesamiento idempotente de mensajes en caso de reintentos.  \n\n**Sugerencias de herramientas/enfoques:**  \n- Herramientas: Apache Kafka, Akka, Spring WebFlux, MongoDB (para proyecciones).  \n- Enfoques: CQRS, Event Sourcing, Patr\u00f3n Actor Model.", "pregunta": "Pregunta sobre el caso de uso", "puntaje": 1, "respuestaAlumno": "", "archivoSubido": false}]}, "createdAt": "2025-04-08T15:09:27.608607", "expiration": "2025-04-15T20:09:27.559Z", "publicAccess": true}